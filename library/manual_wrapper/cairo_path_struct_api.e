note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CAIRO_PATH_STRUCT_API

inherit

	MEMORY_STRUCTURE


create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	status: INTEGER
			-- Access member `status`
		require
			exists: exists
		do
			Result := c_status (item)
		ensure
			result_correct: Result = c_status (item)
		end

	set_status (a_value: INTEGER)
			-- Change the value of member `status` to `a_value`.
		require
			exists: exists
		do
			set_c_status (item, a_value)
		ensure
			status_set: a_value = status
		end

	data: LIST [CAIRO_PATH_DATA_T_UNION_API]
			-- Access member `data`
		require
			exists: exists
		local
			i: INTEGER
		do
			create {ARRAYED_LIST [CAIRO_PATH_DATA_T_UNION_API] } Result.make (num_data)
			Result.compare_objects
			from
				i := 0
			until
				i = num_data
			loop
				Result.force (data_at (i))
				i := i + 1
			end
		ensure
			result_count: Result.count = num_data
		end


	data_at (i: INTEGER): CAIRO_PATH_DATA_T_UNION_API
		require
			valid_index: i>=0 and i < num_data
		local
			l_ptr: POINTER
		do
			create Result.make
			l_ptr := c_data_at (item, i)
			if l_ptr /= default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		end


	set_data (a_value: LIST [CAIRO_PATH_DATA_T_UNION_API])
			-- Set member `data`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		local
			mp: MANAGED_POINTER
		do
			a_value.compare_objects
			create mp.make (a_value.count * {CAIRO_PATH_DATA_T_UNION_API}.structure_size)
			across a_value as ic loop
				mp.set_from_pointer (ic.item.item, {CAIRO_PATH_DATA_T_UNION_API}.structure_size * ic.cursor_index)
			end
			set_c_data (item, mp.item)
		ensure
			data_set: attached data as l_value
			same_data: ∀ n : data ¦ a_value.has (n)
		end

	num_data: INTEGER
			-- Access member `num_data`
		require
			exists: exists
		do
			Result := c_num_data (item)
		ensure
			result_correct: Result = c_num_data (item)
		end

	set_num_data (a_value: INTEGER)
			-- Change the value of member `num_data` to `a_value`.
		require
			exists: exists
		do
			set_c_num_data (item, a_value)
		ensure
			num_data_set: a_value = num_data
		end

feature {NONE} -- Implementation wrapper for struct struct cairo_path

	sizeof_external: INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"sizeof(struct cairo_path)"
		end

	c_status (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->status
			]"
		end

	set_c_status (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->status =  (cairo_status_t)$a_value
			]"
		ensure
			status_set: a_value = c_status (an_item)
		end

	c_data (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->data
			]"
		end


	c_data_at (an_item: POINTER; i: INTEGER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				struct cairo_path* data_item;
				data_item = ((struct cairo_path*)$an_item)->data;
				return &data_item [$i];
			]"
		end

	set_c_data (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->data =  (cairo_path_data_t*)$a_value
			]"
		ensure
			data_set: a_value = c_data (an_item)
		end

	c_num_data (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->num_data
			]"
		end

	set_c_num_data (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->num_data =  (int)$a_value
			]"
		ensure
			num_data_set: a_value = c_num_data (an_item)
		end

end
