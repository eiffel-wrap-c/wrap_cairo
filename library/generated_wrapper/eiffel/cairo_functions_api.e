note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class CAIRO_FUNCTIONS_API


feature -- Access

	cairo_version: INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_version ();
			]"
		end

	cairo_version_string: POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_version_string ();
			]"
		end

	cairo_create (target: CAIRO_SURFACE_STRUCT_API): detachable CAIRO_STRUCT_API 
		do
			if attached c_cairo_create (target.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_reference (cr: CAIRO_STRUCT_API): detachable CAIRO_STRUCT_API 
		do
			if attached c_cairo_reference (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_destroy (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_destroy (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_reference_count (cr: CAIRO_STRUCT_API): INTEGER 
		do
			Result := c_cairo_get_reference_count (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_user_data (cr: CAIRO_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API): POINTER 
		do
			Result := c_cairo_get_user_data (cr.item, key.item)
		ensure
			instance_free: class
		end

	cairo_set_user_data (cr: CAIRO_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API; user_data: POINTER; destroy: POINTER): INTEGER 
		do
			Result := c_cairo_set_user_data (cr.item, key.item, user_data, destroy)
		ensure
			instance_free: class
		end

	cairo_save (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_save (cr.item)
		ensure
			instance_free: class
		end

	cairo_restore (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_restore (cr.item)
		ensure
			instance_free: class
		end

	cairo_push_group (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_push_group (cr.item)
		ensure
			instance_free: class
		end

	cairo_push_group_with_content (cr: CAIRO_STRUCT_API; content: INTEGER) 
		do
			c_cairo_push_group_with_content (cr.item, content)
		ensure
			instance_free: class
		end

	cairo_pop_group (cr: CAIRO_STRUCT_API): detachable CAIRO_PATTERN_STRUCT_API 
		do
			if attached c_cairo_pop_group (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_pop_group_to_source (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_pop_group_to_source (cr.item)
		ensure
			instance_free: class
		end

	cairo_set_operator (cr: CAIRO_STRUCT_API; op: INTEGER) 
		do
			c_cairo_set_operator (cr.item, op)
		ensure
			instance_free: class
		end

	cairo_set_source (cr: CAIRO_STRUCT_API; source: CAIRO_PATTERN_STRUCT_API) 
		do
			c_cairo_set_source (cr.item, source.item)
		ensure
			instance_free: class
		end

	cairo_set_source_rgb (cr: CAIRO_STRUCT_API; red: REAL_64; green: REAL_64; blue: REAL_64) 
		do
			c_cairo_set_source_rgb (cr.item, red, green, blue)
		ensure
			instance_free: class
		end

	cairo_set_source_rgba (cr: CAIRO_STRUCT_API; red: REAL_64; green: REAL_64; blue: REAL_64; alpha: REAL_64) 
		do
			c_cairo_set_source_rgba (cr.item, red, green, blue, alpha)
		ensure
			instance_free: class
		end

	cairo_set_source_surface (cr: CAIRO_STRUCT_API; surface: CAIRO_SURFACE_STRUCT_API; x: REAL_64; y: REAL_64) 
		do
			c_cairo_set_source_surface (cr.item, surface.item, x, y)
		ensure
			instance_free: class
		end

	cairo_set_tolerance (cr: CAIRO_STRUCT_API; tolerance: REAL_64) 
		do
			c_cairo_set_tolerance (cr.item, tolerance)
		ensure
			instance_free: class
		end

	cairo_set_antialias (cr: CAIRO_STRUCT_API; antialias: INTEGER) 
		do
			c_cairo_set_antialias (cr.item, antialias)
		ensure
			instance_free: class
		end

	cairo_set_fill_rule (cr: CAIRO_STRUCT_API; fill_rule: INTEGER) 
		do
			c_cairo_set_fill_rule (cr.item, fill_rule)
		ensure
			instance_free: class
		end

	cairo_set_line_width (cr: CAIRO_STRUCT_API; width: REAL_64) 
		do
			c_cairo_set_line_width (cr.item, width)
		ensure
			instance_free: class
		end

	cairo_set_line_cap (cr: CAIRO_STRUCT_API; line_cap: INTEGER) 
		do
			c_cairo_set_line_cap (cr.item, line_cap)
		ensure
			instance_free: class
		end

	cairo_set_line_join (cr: CAIRO_STRUCT_API; line_join: INTEGER) 
		do
			c_cairo_set_line_join (cr.item, line_join)
		ensure
			instance_free: class
		end

	cairo_set_dash (cr: CAIRO_STRUCT_API; dashes: POINTER; num_dashes: INTEGER; offset: REAL_64) 
		do
			c_cairo_set_dash (cr.item, dashes, num_dashes, offset)
		ensure
			instance_free: class
		end

	cairo_set_miter_limit (cr: CAIRO_STRUCT_API; limit: REAL_64) 
		do
			c_cairo_set_miter_limit (cr.item, limit)
		ensure
			instance_free: class
		end

	cairo_translate (cr: CAIRO_STRUCT_API; tx: REAL_64; ty: REAL_64) 
		do
			c_cairo_translate (cr.item, tx, ty)
		ensure
			instance_free: class
		end

	cairo_scale (cr: CAIRO_STRUCT_API; sx: REAL_64; sy: REAL_64) 
		do
			c_cairo_scale (cr.item, sx, sy)
		ensure
			instance_free: class
		end

	cairo_rotate (cr: CAIRO_STRUCT_API; angle: REAL_64) 
		do
			c_cairo_rotate (cr.item, angle)
		ensure
			instance_free: class
		end

	cairo_transform (cr: CAIRO_STRUCT_API; matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_transform (cr.item, matrix.item)
		ensure
			instance_free: class
		end

	cairo_set_matrix (cr: CAIRO_STRUCT_API; matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_set_matrix (cr.item, matrix.item)
		ensure
			instance_free: class
		end

	cairo_identity_matrix (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_identity_matrix (cr.item)
		ensure
			instance_free: class
		end

	cairo_user_to_device (cr: CAIRO_STRUCT_API; x: POINTER; y: POINTER) 
		do
			c_cairo_user_to_device (cr.item, x, y)
		ensure
			instance_free: class
		end

	cairo_user_to_device_distance (cr: CAIRO_STRUCT_API; dx: POINTER; dy: POINTER) 
		do
			c_cairo_user_to_device_distance (cr.item, dx, dy)
		ensure
			instance_free: class
		end

	cairo_device_to_user (cr: CAIRO_STRUCT_API; x: POINTER; y: POINTER) 
		do
			c_cairo_device_to_user (cr.item, x, y)
		ensure
			instance_free: class
		end

	cairo_device_to_user_distance (cr: CAIRO_STRUCT_API; dx: POINTER; dy: POINTER) 
		do
			c_cairo_device_to_user_distance (cr.item, dx, dy)
		ensure
			instance_free: class
		end

	cairo_new_path (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_new_path (cr.item)
		ensure
			instance_free: class
		end

	cairo_move_to (cr: CAIRO_STRUCT_API; x: REAL_64; y: REAL_64) 
		do
			c_cairo_move_to (cr.item, x, y)
		ensure
			instance_free: class
		end

	cairo_new_sub_path (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_new_sub_path (cr.item)
		ensure
			instance_free: class
		end

	cairo_line_to (cr: CAIRO_STRUCT_API; x: REAL_64; y: REAL_64) 
		do
			c_cairo_line_to (cr.item, x, y)
		ensure
			instance_free: class
		end

	cairo_curve_to (cr: CAIRO_STRUCT_API; x1: REAL_64; y1: REAL_64; x2: REAL_64; y2: REAL_64; x3: REAL_64; y3: REAL_64) 
		do
			c_cairo_curve_to (cr.item, x1, y1, x2, y2, x3, y3)
		ensure
			instance_free: class
		end

	cairo_arc (cr: CAIRO_STRUCT_API; xc: REAL_64; yc: REAL_64; radius: REAL_64; angle1: REAL_64; angle2: REAL_64) 
		do
			c_cairo_arc (cr.item, xc, yc, radius, angle1, angle2)
		ensure
			instance_free: class
		end

	cairo_arc_negative (cr: CAIRO_STRUCT_API; xc: REAL_64; yc: REAL_64; radius: REAL_64; angle1: REAL_64; angle2: REAL_64) 
		do
			c_cairo_arc_negative (cr.item, xc, yc, radius, angle1, angle2)
		ensure
			instance_free: class
		end

	cairo_rel_move_to (cr: CAIRO_STRUCT_API; dx: REAL_64; dy: REAL_64) 
		do
			c_cairo_rel_move_to (cr.item, dx, dy)
		ensure
			instance_free: class
		end

	cairo_rel_line_to (cr: CAIRO_STRUCT_API; dx: REAL_64; dy: REAL_64) 
		do
			c_cairo_rel_line_to (cr.item, dx, dy)
		ensure
			instance_free: class
		end

	cairo_rel_curve_to (cr: CAIRO_STRUCT_API; dx1: REAL_64; dy1: REAL_64; dx2: REAL_64; dy2: REAL_64; dx3: REAL_64; dy3: REAL_64) 
		do
			c_cairo_rel_curve_to (cr.item, dx1, dy1, dx2, dy2, dx3, dy3)
		ensure
			instance_free: class
		end

	cairo_rectangle (cr: CAIRO_STRUCT_API; x: REAL_64; y: REAL_64; width: REAL_64; height: REAL_64) 
		do
			c_cairo_rectangle (cr.item, x, y, width, height)
		ensure
			instance_free: class
		end

	cairo_close_path (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_close_path (cr.item)
		ensure
			instance_free: class
		end

	cairo_path_extents (cr: CAIRO_STRUCT_API; x1: POINTER; y1: POINTER; x2: POINTER; y2: POINTER) 
		do
			c_cairo_path_extents (cr.item, x1, y1, x2, y2)
		ensure
			instance_free: class
		end

	cairo_paint (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_paint (cr.item)
		ensure
			instance_free: class
		end

	cairo_paint_with_alpha (cr: CAIRO_STRUCT_API; alpha: REAL_64) 
		do
			c_cairo_paint_with_alpha (cr.item, alpha)
		ensure
			instance_free: class
		end

	cairo_mask (cr: CAIRO_STRUCT_API; pattern: CAIRO_PATTERN_STRUCT_API) 
		do
			c_cairo_mask (cr.item, pattern.item)
		ensure
			instance_free: class
		end

	cairo_mask_surface (cr: CAIRO_STRUCT_API; surface: CAIRO_SURFACE_STRUCT_API; surface_x: REAL_64; surface_y: REAL_64) 
		do
			c_cairo_mask_surface (cr.item, surface.item, surface_x, surface_y)
		ensure
			instance_free: class
		end

	cairo_stroke (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_stroke (cr.item)
		ensure
			instance_free: class
		end

	cairo_stroke_preserve (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_stroke_preserve (cr.item)
		ensure
			instance_free: class
		end

	cairo_fill (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_fill (cr.item)
		ensure
			instance_free: class
		end

	cairo_fill_preserve (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_fill_preserve (cr.item)
		ensure
			instance_free: class
		end

	cairo_copy_page (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_copy_page (cr.item)
		ensure
			instance_free: class
		end

	cairo_show_page (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_show_page (cr.item)
		ensure
			instance_free: class
		end

	cairo_in_stroke (cr: CAIRO_STRUCT_API; x: REAL_64; y: REAL_64): INTEGER 
		do
			Result := c_cairo_in_stroke (cr.item, x, y)
		ensure
			instance_free: class
		end

	cairo_in_fill (cr: CAIRO_STRUCT_API; x: REAL_64; y: REAL_64): INTEGER 
		do
			Result := c_cairo_in_fill (cr.item, x, y)
		ensure
			instance_free: class
		end

	cairo_in_clip (cr: CAIRO_STRUCT_API; x: REAL_64; y: REAL_64): INTEGER 
		do
			Result := c_cairo_in_clip (cr.item, x, y)
		ensure
			instance_free: class
		end

	cairo_stroke_extents (cr: CAIRO_STRUCT_API; x1: POINTER; y1: POINTER; x2: POINTER; y2: POINTER) 
		do
			c_cairo_stroke_extents (cr.item, x1, y1, x2, y2)
		ensure
			instance_free: class
		end

	cairo_fill_extents (cr: CAIRO_STRUCT_API; x1: POINTER; y1: POINTER; x2: POINTER; y2: POINTER) 
		do
			c_cairo_fill_extents (cr.item, x1, y1, x2, y2)
		ensure
			instance_free: class
		end

	cairo_reset_clip (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_reset_clip (cr.item)
		ensure
			instance_free: class
		end

	cairo_clip (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_clip (cr.item)
		ensure
			instance_free: class
		end

	cairo_clip_preserve (cr: CAIRO_STRUCT_API) 
		do
			c_cairo_clip_preserve (cr.item)
		ensure
			instance_free: class
		end

	cairo_clip_extents (cr: CAIRO_STRUCT_API; x1: POINTER; y1: POINTER; x2: POINTER; y2: POINTER) 
		do
			c_cairo_clip_extents (cr.item, x1, y1, x2, y2)
		ensure
			instance_free: class
		end

	cairo_copy_clip_rectangle_list (cr: CAIRO_STRUCT_API): detachable CAIRO_RECTANGLE_LIST_STRUCT_API 
		do
			if attached c_cairo_copy_clip_rectangle_list (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_rectangle_list_destroy (rectangle_list: CAIRO_RECTANGLE_LIST_STRUCT_API) 
		do
			c_cairo_rectangle_list_destroy (rectangle_list.item)
		ensure
			instance_free: class
		end

	cairo_tag_begin (cr: CAIRO_STRUCT_API; tag_name: STRING_8; attributes: STRING_8) 
		local
			tag_name_c_string: C_STRING
			attributes_c_string: C_STRING
		do
			create tag_name_c_string.make (tag_name)
			create attributes_c_string.make (attributes)
			c_cairo_tag_begin (cr.item, tag_name_c_string.item, attributes_c_string.item)
		ensure
			instance_free: class
		end

	cairo_tag_end (cr: CAIRO_STRUCT_API; tag_name: STRING_8) 
		local
			tag_name_c_string: C_STRING
		do
			create tag_name_c_string.make (tag_name)
			c_cairo_tag_end (cr.item, tag_name_c_string.item)
		ensure
			instance_free: class
		end

	cairo_glyph_allocate (num_glyphs: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_glyph_allocate ((int)$num_glyphs);
			]"
		end

	cairo_glyph_free (glyphs: CAIRO_GLYPH_T_STRUCT_API) 
		do
			c_cairo_glyph_free (glyphs.item)
		ensure
			instance_free: class
		end

	cairo_text_cluster_allocate (num_clusters: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_text_cluster_allocate ((int)$num_clusters);
			]"
		end

	cairo_text_cluster_free (clusters: CAIRO_TEXT_CLUSTER_T_STRUCT_API) 
		do
			c_cairo_text_cluster_free (clusters.item)
		ensure
			instance_free: class
		end

	cairo_font_options_create: detachable CAIRO_FONT_OPTIONS_STRUCT_API 
		do
			if attached c_cairo_font_options_create as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_font_options_copy (original: CAIRO_FONT_OPTIONS_STRUCT_API): detachable CAIRO_FONT_OPTIONS_STRUCT_API 
		do
			if attached c_cairo_font_options_copy (original.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_font_options_destroy (options: CAIRO_FONT_OPTIONS_STRUCT_API) 
		do
			c_cairo_font_options_destroy (options.item)
		ensure
			instance_free: class
		end

	cairo_font_options_status (options: CAIRO_FONT_OPTIONS_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_options_status (options.item)
		ensure
			instance_free: class
		end

	cairo_font_options_merge (options: CAIRO_FONT_OPTIONS_STRUCT_API; other: CAIRO_FONT_OPTIONS_STRUCT_API) 
		do
			c_cairo_font_options_merge (options.item, other.item)
		ensure
			instance_free: class
		end

	cairo_font_options_equal (options: CAIRO_FONT_OPTIONS_STRUCT_API; other: CAIRO_FONT_OPTIONS_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_options_equal (options.item, other.item)
		ensure
			instance_free: class
		end

	cairo_font_options_hash (options: CAIRO_FONT_OPTIONS_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_options_hash (options.item)
		ensure
			instance_free: class
		end

	cairo_font_options_set_antialias (options: CAIRO_FONT_OPTIONS_STRUCT_API; antialias: INTEGER) 
		do
			c_cairo_font_options_set_antialias (options.item, antialias)
		ensure
			instance_free: class
		end

	cairo_font_options_get_antialias (options: CAIRO_FONT_OPTIONS_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_options_get_antialias (options.item)
		ensure
			instance_free: class
		end

	cairo_font_options_set_subpixel_order (options: CAIRO_FONT_OPTIONS_STRUCT_API; subpixel_order: INTEGER) 
		do
			c_cairo_font_options_set_subpixel_order (options.item, subpixel_order)
		ensure
			instance_free: class
		end

	cairo_font_options_get_subpixel_order (options: CAIRO_FONT_OPTIONS_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_options_get_subpixel_order (options.item)
		ensure
			instance_free: class
		end

	cairo_font_options_set_hint_style (options: CAIRO_FONT_OPTIONS_STRUCT_API; hint_style: INTEGER) 
		do
			c_cairo_font_options_set_hint_style (options.item, hint_style)
		ensure
			instance_free: class
		end

	cairo_font_options_get_hint_style (options: CAIRO_FONT_OPTIONS_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_options_get_hint_style (options.item)
		ensure
			instance_free: class
		end

	cairo_font_options_set_hint_metrics (options: CAIRO_FONT_OPTIONS_STRUCT_API; hint_metrics: INTEGER) 
		do
			c_cairo_font_options_set_hint_metrics (options.item, hint_metrics)
		ensure
			instance_free: class
		end

	cairo_font_options_get_hint_metrics (options: CAIRO_FONT_OPTIONS_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_options_get_hint_metrics (options.item)
		ensure
			instance_free: class
		end

	cairo_font_options_get_variations (options: CAIRO_FONT_OPTIONS_STRUCT_API): POINTER 
		do
			Result := c_cairo_font_options_get_variations (options.item)
		ensure
			instance_free: class
		end

	cairo_font_options_set_variations (options: CAIRO_FONT_OPTIONS_STRUCT_API; variations: STRING_8) 
		local
			variations_c_string: C_STRING
		do
			create variations_c_string.make (variations)
			c_cairo_font_options_set_variations (options.item, variations_c_string.item)
		ensure
			instance_free: class
		end

	cairo_select_font_face (cr: CAIRO_STRUCT_API; family: STRING_8; slant: INTEGER; weight: INTEGER) 
		local
			family_c_string: C_STRING
		do
			create family_c_string.make (family)
			c_cairo_select_font_face (cr.item, family_c_string.item, slant, weight)
		ensure
			instance_free: class
		end

	cairo_set_font_size (cr: CAIRO_STRUCT_API; size: REAL_64) 
		do
			c_cairo_set_font_size (cr.item, size)
		ensure
			instance_free: class
		end

	cairo_set_font_matrix (cr: CAIRO_STRUCT_API; matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_set_font_matrix (cr.item, matrix.item)
		ensure
			instance_free: class
		end

	cairo_get_font_matrix (cr: CAIRO_STRUCT_API; matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_get_font_matrix (cr.item, matrix.item)
		ensure
			instance_free: class
		end

	cairo_set_font_options (cr: CAIRO_STRUCT_API; options: CAIRO_FONT_OPTIONS_STRUCT_API) 
		do
			c_cairo_set_font_options (cr.item, options.item)
		ensure
			instance_free: class
		end

	cairo_get_font_options (cr: CAIRO_STRUCT_API; options: CAIRO_FONT_OPTIONS_STRUCT_API) 
		do
			c_cairo_get_font_options (cr.item, options.item)
		ensure
			instance_free: class
		end

	cairo_set_font_face (cr: CAIRO_STRUCT_API; font_face: CAIRO_FONT_FACE_STRUCT_API) 
		do
			c_cairo_set_font_face (cr.item, font_face.item)
		ensure
			instance_free: class
		end

	cairo_get_font_face (cr: CAIRO_STRUCT_API): detachable CAIRO_FONT_FACE_STRUCT_API 
		do
			if attached c_cairo_get_font_face (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_set_scaled_font (cr: CAIRO_STRUCT_API; scaled_font: CAIRO_SCALED_FONT_STRUCT_API) 
		do
			c_cairo_set_scaled_font (cr.item, scaled_font.item)
		ensure
			instance_free: class
		end

	cairo_get_scaled_font (cr: CAIRO_STRUCT_API): detachable CAIRO_SCALED_FONT_STRUCT_API 
		do
			if attached c_cairo_get_scaled_font (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_show_text (cr: CAIRO_STRUCT_API; utf8: STRING_8) 
		local
			utf8_c_string: C_STRING
		do
			create utf8_c_string.make (utf8)
			c_cairo_show_text (cr.item, utf8_c_string.item)
		ensure
			instance_free: class
		end

	cairo_show_glyphs (cr: CAIRO_STRUCT_API; glyphs: CAIRO_GLYPH_T_STRUCT_API; num_glyphs: INTEGER) 
		do
			c_cairo_show_glyphs (cr.item, glyphs.item, num_glyphs)
		ensure
			instance_free: class
		end

	cairo_show_text_glyphs (cr: CAIRO_STRUCT_API; utf8: STRING_8; utf8_len: INTEGER; glyphs: CAIRO_GLYPH_T_STRUCT_API; num_glyphs: INTEGER; clusters: CAIRO_TEXT_CLUSTER_T_STRUCT_API; num_clusters: INTEGER; cluster_flags: INTEGER) 
		local
			utf8_c_string: C_STRING
		do
			create utf8_c_string.make (utf8)
			c_cairo_show_text_glyphs (cr.item, utf8_c_string.item, utf8_len, glyphs.item, num_glyphs, clusters.item, num_clusters, cluster_flags)
		ensure
			instance_free: class
		end

	cairo_text_path (cr: CAIRO_STRUCT_API; utf8: STRING_8) 
		local
			utf8_c_string: C_STRING
		do
			create utf8_c_string.make (utf8)
			c_cairo_text_path (cr.item, utf8_c_string.item)
		ensure
			instance_free: class
		end

	cairo_glyph_path (cr: CAIRO_STRUCT_API; glyphs: CAIRO_GLYPH_T_STRUCT_API; num_glyphs: INTEGER) 
		do
			c_cairo_glyph_path (cr.item, glyphs.item, num_glyphs)
		ensure
			instance_free: class
		end

	cairo_text_extents (cr: CAIRO_STRUCT_API; utf8: STRING_8; extents: CAIRO_TEXT_EXTENTS_T_STRUCT_API) 
		local
			utf8_c_string: C_STRING
		do
			create utf8_c_string.make (utf8)
			c_cairo_text_extents (cr.item, utf8_c_string.item, extents.item)
		ensure
			instance_free: class
		end

	cairo_glyph_extents (cr: CAIRO_STRUCT_API; glyphs: CAIRO_GLYPH_T_STRUCT_API; num_glyphs: INTEGER; extents: CAIRO_TEXT_EXTENTS_T_STRUCT_API) 
		do
			c_cairo_glyph_extents (cr.item, glyphs.item, num_glyphs, extents.item)
		ensure
			instance_free: class
		end

	cairo_font_extents (cr: CAIRO_STRUCT_API; extents: CAIRO_FONT_EXTENTS_T_STRUCT_API) 
		do
			c_cairo_font_extents (cr.item, extents.item)
		ensure
			instance_free: class
		end

	cairo_font_face_reference (font_face: CAIRO_FONT_FACE_STRUCT_API): detachable CAIRO_FONT_FACE_STRUCT_API 
		do
			if attached c_cairo_font_face_reference (font_face.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_font_face_destroy (font_face: CAIRO_FONT_FACE_STRUCT_API) 
		do
			c_cairo_font_face_destroy (font_face.item)
		ensure
			instance_free: class
		end

	cairo_font_face_get_reference_count (font_face: CAIRO_FONT_FACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_face_get_reference_count (font_face.item)
		ensure
			instance_free: class
		end

	cairo_font_face_status (font_face: CAIRO_FONT_FACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_face_status (font_face.item)
		ensure
			instance_free: class
		end

	cairo_font_face_get_type (font_face: CAIRO_FONT_FACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_font_face_get_type (font_face.item)
		ensure
			instance_free: class
		end

	cairo_font_face_get_user_data (font_face: CAIRO_FONT_FACE_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API): POINTER 
		do
			Result := c_cairo_font_face_get_user_data (font_face.item, key.item)
		ensure
			instance_free: class
		end

	cairo_font_face_set_user_data (font_face: CAIRO_FONT_FACE_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API; user_data: POINTER; destroy: POINTER): INTEGER 
		do
			Result := c_cairo_font_face_set_user_data (font_face.item, key.item, user_data, destroy)
		ensure
			instance_free: class
		end

	cairo_scaled_font_create (font_face: CAIRO_FONT_FACE_STRUCT_API; font_matrix: CAIRO_MATRIX_STRUCT_API; ctm: CAIRO_MATRIX_STRUCT_API; options: CAIRO_FONT_OPTIONS_STRUCT_API): detachable CAIRO_SCALED_FONT_STRUCT_API 
		do
			if attached c_cairo_scaled_font_create (font_face.item, font_matrix.item, ctm.item, options.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_scaled_font_reference (scaled_font: CAIRO_SCALED_FONT_STRUCT_API): detachable CAIRO_SCALED_FONT_STRUCT_API 
		do
			if attached c_cairo_scaled_font_reference (scaled_font.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_scaled_font_destroy (scaled_font: CAIRO_SCALED_FONT_STRUCT_API) 
		do
			c_cairo_scaled_font_destroy (scaled_font.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_get_reference_count (scaled_font: CAIRO_SCALED_FONT_STRUCT_API): INTEGER 
		do
			Result := c_cairo_scaled_font_get_reference_count (scaled_font.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_status (scaled_font: CAIRO_SCALED_FONT_STRUCT_API): INTEGER 
		do
			Result := c_cairo_scaled_font_status (scaled_font.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_get_type (scaled_font: CAIRO_SCALED_FONT_STRUCT_API): INTEGER 
		do
			Result := c_cairo_scaled_font_get_type (scaled_font.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_get_user_data (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API): POINTER 
		do
			Result := c_cairo_scaled_font_get_user_data (scaled_font.item, key.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_set_user_data (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API; user_data: POINTER; destroy: POINTER): INTEGER 
		do
			Result := c_cairo_scaled_font_set_user_data (scaled_font.item, key.item, user_data, destroy)
		ensure
			instance_free: class
		end

	cairo_scaled_font_extents (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; extents: CAIRO_FONT_EXTENTS_T_STRUCT_API) 
		do
			c_cairo_scaled_font_extents (scaled_font.item, extents.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_text_extents (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; utf8: STRING_8; extents: CAIRO_TEXT_EXTENTS_T_STRUCT_API) 
		local
			utf8_c_string: C_STRING
		do
			create utf8_c_string.make (utf8)
			c_cairo_scaled_font_text_extents (scaled_font.item, utf8_c_string.item, extents.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_glyph_extents (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; glyphs: CAIRO_GLYPH_T_STRUCT_API; num_glyphs: INTEGER; extents: CAIRO_TEXT_EXTENTS_T_STRUCT_API) 
		do
			c_cairo_scaled_font_glyph_extents (scaled_font.item, glyphs.item, num_glyphs, extents.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_text_to_glyphs (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; x: REAL_64; y: REAL_64; utf8: STRING_8; utf8_len: INTEGER; glyphs: CAIRO_GLYPH_T_STRUCT_API; num_glyphs: POINTER; clusters: CAIRO_TEXT_CLUSTER_T_STRUCT_API; num_clusters: POINTER; cluster_flags: POINTER): INTEGER 
		local
			utf8_c_string: C_STRING
		do
			create utf8_c_string.make (utf8)
			Result := c_cairo_scaled_font_text_to_glyphs (scaled_font.item, x, y, utf8_c_string.item, utf8_len, glyphs.item, num_glyphs, clusters.item, num_clusters, cluster_flags)
		ensure
			instance_free: class
		end

	cairo_scaled_font_get_font_face (scaled_font: CAIRO_SCALED_FONT_STRUCT_API): detachable CAIRO_FONT_FACE_STRUCT_API 
		do
			if attached c_cairo_scaled_font_get_font_face (scaled_font.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_scaled_font_get_font_matrix (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; font_matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_scaled_font_get_font_matrix (scaled_font.item, font_matrix.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_get_ctm (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; ctm: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_scaled_font_get_ctm (scaled_font.item, ctm.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_get_scale_matrix (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; scale_matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_scaled_font_get_scale_matrix (scaled_font.item, scale_matrix.item)
		ensure
			instance_free: class
		end

	cairo_scaled_font_get_font_options (scaled_font: CAIRO_SCALED_FONT_STRUCT_API; options: CAIRO_FONT_OPTIONS_STRUCT_API) 
		do
			c_cairo_scaled_font_get_font_options (scaled_font.item, options.item)
		ensure
			instance_free: class
		end

	cairo_toy_font_face_create (family: STRING_8; slant: INTEGER; weight: INTEGER): detachable CAIRO_FONT_FACE_STRUCT_API 
		local
			family_c_string: C_STRING
		do
			create family_c_string.make (family)
			if attached c_cairo_toy_font_face_create (family_c_string.item, slant, weight) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_toy_font_face_get_family (font_face: CAIRO_FONT_FACE_STRUCT_API): POINTER 
		do
			Result := c_cairo_toy_font_face_get_family (font_face.item)
		ensure
			instance_free: class
		end

	cairo_toy_font_face_get_slant (font_face: CAIRO_FONT_FACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_toy_font_face_get_slant (font_face.item)
		ensure
			instance_free: class
		end

	cairo_toy_font_face_get_weight (font_face: CAIRO_FONT_FACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_toy_font_face_get_weight (font_face.item)
		ensure
			instance_free: class
		end

	cairo_user_font_face_create: detachable CAIRO_FONT_FACE_STRUCT_API 
		do
			if attached c_cairo_user_font_face_create as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_user_font_face_set_init_func (font_face: CAIRO_FONT_FACE_STRUCT_API; init_func: POINTER) 
		do
			c_cairo_user_font_face_set_init_func (font_face.item, init_func)
		ensure
			instance_free: class
		end

	cairo_user_font_face_set_render_glyph_func (font_face: CAIRO_FONT_FACE_STRUCT_API; render_glyph_func: POINTER) 
		do
			c_cairo_user_font_face_set_render_glyph_func (font_face.item, render_glyph_func)
		ensure
			instance_free: class
		end

	cairo_user_font_face_set_text_to_glyphs_func (font_face: CAIRO_FONT_FACE_STRUCT_API; text_to_glyphs_func: POINTER) 
		do
			c_cairo_user_font_face_set_text_to_glyphs_func (font_face.item, text_to_glyphs_func)
		ensure
			instance_free: class
		end

	cairo_user_font_face_set_unicode_to_glyph_func (font_face: CAIRO_FONT_FACE_STRUCT_API; unicode_to_glyph_func: POINTER) 
		do
			c_cairo_user_font_face_set_unicode_to_glyph_func (font_face.item, unicode_to_glyph_func)
		ensure
			instance_free: class
		end

	cairo_user_font_face_get_init_func (font_face: CAIRO_FONT_FACE_STRUCT_API): POINTER 
		do
			Result := c_cairo_user_font_face_get_init_func (font_face.item)
		ensure
			instance_free: class
		end

	cairo_user_font_face_get_render_glyph_func (font_face: CAIRO_FONT_FACE_STRUCT_API): POINTER 
		do
			Result := c_cairo_user_font_face_get_render_glyph_func (font_face.item)
		ensure
			instance_free: class
		end

	cairo_user_font_face_get_text_to_glyphs_func (font_face: CAIRO_FONT_FACE_STRUCT_API): POINTER 
		do
			Result := c_cairo_user_font_face_get_text_to_glyphs_func (font_face.item)
		ensure
			instance_free: class
		end

	cairo_user_font_face_get_unicode_to_glyph_func (font_face: CAIRO_FONT_FACE_STRUCT_API): POINTER 
		do
			Result := c_cairo_user_font_face_get_unicode_to_glyph_func (font_face.item)
		ensure
			instance_free: class
		end

	cairo_get_operator (cr: CAIRO_STRUCT_API): INTEGER 
		do
			Result := c_cairo_get_operator (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_source (cr: CAIRO_STRUCT_API): detachable CAIRO_PATTERN_STRUCT_API 
		do
			if attached c_cairo_get_source (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_get_tolerance (cr: CAIRO_STRUCT_API): REAL_64 
		do
			Result := c_cairo_get_tolerance (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_antialias (cr: CAIRO_STRUCT_API): INTEGER 
		do
			Result := c_cairo_get_antialias (cr.item)
		ensure
			instance_free: class
		end

	cairo_has_current_point (cr: CAIRO_STRUCT_API): INTEGER 
		do
			Result := c_cairo_has_current_point (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_current_point (cr: CAIRO_STRUCT_API; x: POINTER; y: POINTER) 
		do
			c_cairo_get_current_point (cr.item, x, y)
		ensure
			instance_free: class
		end

	cairo_get_fill_rule (cr: CAIRO_STRUCT_API): INTEGER 
		do
			Result := c_cairo_get_fill_rule (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_line_width (cr: CAIRO_STRUCT_API): REAL_64 
		do
			Result := c_cairo_get_line_width (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_line_cap (cr: CAIRO_STRUCT_API): INTEGER 
		do
			Result := c_cairo_get_line_cap (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_line_join (cr: CAIRO_STRUCT_API): INTEGER 
		do
			Result := c_cairo_get_line_join (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_miter_limit (cr: CAIRO_STRUCT_API): REAL_64 
		do
			Result := c_cairo_get_miter_limit (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_dash_count (cr: CAIRO_STRUCT_API): INTEGER 
		do
			Result := c_cairo_get_dash_count (cr.item)
		ensure
			instance_free: class
		end

	cairo_get_dash (cr: CAIRO_STRUCT_API; dashes: POINTER; offset: POINTER) 
		do
			c_cairo_get_dash (cr.item, dashes, offset)
		ensure
			instance_free: class
		end

	cairo_get_matrix (cr: CAIRO_STRUCT_API; matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_get_matrix (cr.item, matrix.item)
		ensure
			instance_free: class
		end

	cairo_get_target (cr: CAIRO_STRUCT_API): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_get_target (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_get_group_target (cr: CAIRO_STRUCT_API): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_get_group_target (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_copy_path (cr: CAIRO_STRUCT_API): detachable CAIRO_PATH_STRUCT_API 
		do
			if attached c_cairo_copy_path (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_copy_path_flat (cr: CAIRO_STRUCT_API): detachable CAIRO_PATH_STRUCT_API 
		do
			if attached c_cairo_copy_path_flat (cr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_append_path (cr: CAIRO_STRUCT_API; path: CAIRO_PATH_STRUCT_API) 
		do
			c_cairo_append_path (cr.item, path.item)
		ensure
			instance_free: class
		end

	cairo_path_destroy (path: CAIRO_PATH_STRUCT_API) 
		do
			c_cairo_path_destroy (path.item)
		ensure
			instance_free: class
		end

	cairo_status (cr: CAIRO_STRUCT_API): INTEGER 
		do
			Result := c_cairo_status (cr.item)
		ensure
			instance_free: class
		end

	cairo_status_to_string (status: INTEGER): POINTER 
		do
			Result := c_cairo_status_to_string (status)
		ensure
			instance_free: class
		end

	cairo_device_reference (device: CAIRO_DEVICE_STRUCT_API): detachable CAIRO_DEVICE_STRUCT_API 
		do
			if attached c_cairo_device_reference (device.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_device_get_type (device: CAIRO_DEVICE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_device_get_type (device.item)
		ensure
			instance_free: class
		end

	cairo_device_status (device: CAIRO_DEVICE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_device_status (device.item)
		ensure
			instance_free: class
		end

	cairo_device_acquire (device: CAIRO_DEVICE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_device_acquire (device.item)
		ensure
			instance_free: class
		end

	cairo_device_release (device: CAIRO_DEVICE_STRUCT_API) 
		do
			c_cairo_device_release (device.item)
		ensure
			instance_free: class
		end

	cairo_device_flush (device: CAIRO_DEVICE_STRUCT_API) 
		do
			c_cairo_device_flush (device.item)
		ensure
			instance_free: class
		end

	cairo_device_finish (device: CAIRO_DEVICE_STRUCT_API) 
		do
			c_cairo_device_finish (device.item)
		ensure
			instance_free: class
		end

	cairo_device_destroy (device: CAIRO_DEVICE_STRUCT_API) 
		do
			c_cairo_device_destroy (device.item)
		ensure
			instance_free: class
		end

	cairo_device_get_reference_count (device: CAIRO_DEVICE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_device_get_reference_count (device.item)
		ensure
			instance_free: class
		end

	cairo_device_get_user_data (device: CAIRO_DEVICE_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API): POINTER 
		do
			Result := c_cairo_device_get_user_data (device.item, key.item)
		ensure
			instance_free: class
		end

	cairo_device_set_user_data (device: CAIRO_DEVICE_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API; user_data: POINTER; destroy: POINTER): INTEGER 
		do
			Result := c_cairo_device_set_user_data (device.item, key.item, user_data, destroy)
		ensure
			instance_free: class
		end

	cairo_surface_create_similar (other: CAIRO_SURFACE_STRUCT_API; content: INTEGER; width: INTEGER; height: INTEGER): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_surface_create_similar (other.item, content, width, height) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_surface_create_similar_image (other: CAIRO_SURFACE_STRUCT_API; format: INTEGER; width: INTEGER; height: INTEGER): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_surface_create_similar_image (other.item, format, width, height) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_surface_map_to_image (surface: CAIRO_SURFACE_STRUCT_API; extents: CAIRO_RECTANGLE_INT_STRUCT_API): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_surface_map_to_image (surface.item, extents.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_surface_unmap_image (surface: CAIRO_SURFACE_STRUCT_API; image: CAIRO_SURFACE_STRUCT_API) 
		do
			c_cairo_surface_unmap_image (surface.item, image.item)
		ensure
			instance_free: class
		end

	cairo_surface_create_for_rectangle (target: CAIRO_SURFACE_STRUCT_API; x: REAL_64; y: REAL_64; width: REAL_64; height: REAL_64): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_surface_create_for_rectangle (target.item, x, y, width, height) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_surface_create_observer (target: CAIRO_SURFACE_STRUCT_API; mode: INTEGER): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_surface_create_observer (target.item, mode) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_surface_observer_add_paint_callback (abstract_surface: CAIRO_SURFACE_STRUCT_API; func: POINTER; data: POINTER): INTEGER 
		do
			Result := c_cairo_surface_observer_add_paint_callback (abstract_surface.item, func, data)
		ensure
			instance_free: class
		end

	cairo_surface_observer_add_mask_callback (abstract_surface: CAIRO_SURFACE_STRUCT_API; func: POINTER; data: POINTER): INTEGER 
		do
			Result := c_cairo_surface_observer_add_mask_callback (abstract_surface.item, func, data)
		ensure
			instance_free: class
		end

	cairo_surface_observer_add_fill_callback (abstract_surface: CAIRO_SURFACE_STRUCT_API; func: POINTER; data: POINTER): INTEGER 
		do
			Result := c_cairo_surface_observer_add_fill_callback (abstract_surface.item, func, data)
		ensure
			instance_free: class
		end

	cairo_surface_observer_add_stroke_callback (abstract_surface: CAIRO_SURFACE_STRUCT_API; func: POINTER; data: POINTER): INTEGER 
		do
			Result := c_cairo_surface_observer_add_stroke_callback (abstract_surface.item, func, data)
		ensure
			instance_free: class
		end

	cairo_surface_observer_add_glyphs_callback (abstract_surface: CAIRO_SURFACE_STRUCT_API; func: POINTER; data: POINTER): INTEGER 
		do
			Result := c_cairo_surface_observer_add_glyphs_callback (abstract_surface.item, func, data)
		ensure
			instance_free: class
		end

	cairo_surface_observer_add_flush_callback (abstract_surface: CAIRO_SURFACE_STRUCT_API; func: POINTER; data: POINTER): INTEGER 
		do
			Result := c_cairo_surface_observer_add_flush_callback (abstract_surface.item, func, data)
		ensure
			instance_free: class
		end

	cairo_surface_observer_add_finish_callback (abstract_surface: CAIRO_SURFACE_STRUCT_API; func: POINTER; data: POINTER): INTEGER 
		do
			Result := c_cairo_surface_observer_add_finish_callback (abstract_surface.item, func, data)
		ensure
			instance_free: class
		end

	cairo_surface_observer_print (surface: CAIRO_SURFACE_STRUCT_API; write_func: POINTER; closure: POINTER): INTEGER 
		do
			Result := c_cairo_surface_observer_print (surface.item, write_func, closure)
		ensure
			instance_free: class
		end

	cairo_surface_observer_elapsed (surface: CAIRO_SURFACE_STRUCT_API): REAL_64 
		do
			Result := c_cairo_surface_observer_elapsed (surface.item)
		ensure
			instance_free: class
		end

	cairo_device_observer_print (device: CAIRO_DEVICE_STRUCT_API; write_func: POINTER; closure: POINTER): INTEGER 
		do
			Result := c_cairo_device_observer_print (device.item, write_func, closure)
		ensure
			instance_free: class
		end

	cairo_device_observer_elapsed (device: CAIRO_DEVICE_STRUCT_API): REAL_64 
		do
			Result := c_cairo_device_observer_elapsed (device.item)
		ensure
			instance_free: class
		end

	cairo_device_observer_paint_elapsed (device: CAIRO_DEVICE_STRUCT_API): REAL_64 
		do
			Result := c_cairo_device_observer_paint_elapsed (device.item)
		ensure
			instance_free: class
		end

	cairo_device_observer_mask_elapsed (device: CAIRO_DEVICE_STRUCT_API): REAL_64 
		do
			Result := c_cairo_device_observer_mask_elapsed (device.item)
		ensure
			instance_free: class
		end

	cairo_device_observer_fill_elapsed (device: CAIRO_DEVICE_STRUCT_API): REAL_64 
		do
			Result := c_cairo_device_observer_fill_elapsed (device.item)
		ensure
			instance_free: class
		end

	cairo_device_observer_stroke_elapsed (device: CAIRO_DEVICE_STRUCT_API): REAL_64 
		do
			Result := c_cairo_device_observer_stroke_elapsed (device.item)
		ensure
			instance_free: class
		end

	cairo_device_observer_glyphs_elapsed (device: CAIRO_DEVICE_STRUCT_API): REAL_64 
		do
			Result := c_cairo_device_observer_glyphs_elapsed (device.item)
		ensure
			instance_free: class
		end

	cairo_surface_reference (surface: CAIRO_SURFACE_STRUCT_API): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_surface_reference (surface.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_surface_finish (surface: CAIRO_SURFACE_STRUCT_API) 
		do
			c_cairo_surface_finish (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_destroy (surface: CAIRO_SURFACE_STRUCT_API) 
		do
			c_cairo_surface_destroy (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_get_device (surface: CAIRO_SURFACE_STRUCT_API): detachable CAIRO_DEVICE_STRUCT_API 
		do
			if attached c_cairo_surface_get_device (surface.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_surface_get_reference_count (surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_surface_get_reference_count (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_status (surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_surface_status (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_get_type (surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_surface_get_type (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_get_content (surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_surface_get_content (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_write_to_png (surface: CAIRO_SURFACE_STRUCT_API; filename: STRING_8): INTEGER 
		local
			filename_c_string: C_STRING
		do
			create filename_c_string.make (filename)
			Result := c_cairo_surface_write_to_png (surface.item, filename_c_string.item)
		ensure
			instance_free: class
		end

	cairo_surface_write_to_png_stream (surface: CAIRO_SURFACE_STRUCT_API; write_func: POINTER; closure: POINTER): INTEGER 
		do
			Result := c_cairo_surface_write_to_png_stream (surface.item, write_func, closure)
		ensure
			instance_free: class
		end

	cairo_surface_get_user_data (surface: CAIRO_SURFACE_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API): POINTER 
		do
			Result := c_cairo_surface_get_user_data (surface.item, key.item)
		ensure
			instance_free: class
		end

	cairo_surface_set_user_data (surface: CAIRO_SURFACE_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API; user_data: POINTER; destroy: POINTER): INTEGER 
		do
			Result := c_cairo_surface_set_user_data (surface.item, key.item, user_data, destroy)
		ensure
			instance_free: class
		end

	cairo_surface_get_mime_data (surface: CAIRO_SURFACE_STRUCT_API; mime_type: STRING_8; data: POINTER; length: POINTER) 
		local
			mime_type_c_string: C_STRING
		do
			create mime_type_c_string.make (mime_type)
			c_cairo_surface_get_mime_data (surface.item, mime_type_c_string.item, data, length)
		ensure
			instance_free: class
		end

	cairo_surface_set_mime_data (surface: CAIRO_SURFACE_STRUCT_API; mime_type: STRING_8; data: STRING_8; length: INTEGER; destroy: POINTER; closure: POINTER): INTEGER 
		local
			mime_type_c_string: C_STRING
			data_c_string: C_STRING
		do
			create mime_type_c_string.make (mime_type)
			create data_c_string.make (data)
			Result := c_cairo_surface_set_mime_data (surface.item, mime_type_c_string.item, data_c_string.item, length, destroy, closure)
		ensure
			instance_free: class
		end

	cairo_surface_supports_mime_type (surface: CAIRO_SURFACE_STRUCT_API; mime_type: STRING_8): INTEGER 
		local
			mime_type_c_string: C_STRING
		do
			create mime_type_c_string.make (mime_type)
			Result := c_cairo_surface_supports_mime_type (surface.item, mime_type_c_string.item)
		ensure
			instance_free: class
		end

	cairo_surface_get_font_options (surface: CAIRO_SURFACE_STRUCT_API; options: CAIRO_FONT_OPTIONS_STRUCT_API) 
		do
			c_cairo_surface_get_font_options (surface.item, options.item)
		ensure
			instance_free: class
		end

	cairo_surface_flush (surface: CAIRO_SURFACE_STRUCT_API) 
		do
			c_cairo_surface_flush (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_mark_dirty (surface: CAIRO_SURFACE_STRUCT_API) 
		do
			c_cairo_surface_mark_dirty (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_mark_dirty_rectangle (surface: CAIRO_SURFACE_STRUCT_API; x: INTEGER; y: INTEGER; width: INTEGER; height: INTEGER) 
		do
			c_cairo_surface_mark_dirty_rectangle (surface.item, x, y, width, height)
		ensure
			instance_free: class
		end

	cairo_surface_set_device_scale (surface: CAIRO_SURFACE_STRUCT_API; x_scale: REAL_64; y_scale: REAL_64) 
		do
			c_cairo_surface_set_device_scale (surface.item, x_scale, y_scale)
		ensure
			instance_free: class
		end

	cairo_surface_get_device_scale (surface: CAIRO_SURFACE_STRUCT_API; x_scale: POINTER; y_scale: POINTER) 
		do
			c_cairo_surface_get_device_scale (surface.item, x_scale, y_scale)
		ensure
			instance_free: class
		end

	cairo_surface_set_device_offset (surface: CAIRO_SURFACE_STRUCT_API; x_offset: REAL_64; y_offset: REAL_64) 
		do
			c_cairo_surface_set_device_offset (surface.item, x_offset, y_offset)
		ensure
			instance_free: class
		end

	cairo_surface_get_device_offset (surface: CAIRO_SURFACE_STRUCT_API; x_offset: POINTER; y_offset: POINTER) 
		do
			c_cairo_surface_get_device_offset (surface.item, x_offset, y_offset)
		ensure
			instance_free: class
		end

	cairo_surface_set_fallback_resolution (surface: CAIRO_SURFACE_STRUCT_API; x_pixels_per_inch: REAL_64; y_pixels_per_inch: REAL_64) 
		do
			c_cairo_surface_set_fallback_resolution (surface.item, x_pixels_per_inch, y_pixels_per_inch)
		ensure
			instance_free: class
		end

	cairo_surface_get_fallback_resolution (surface: CAIRO_SURFACE_STRUCT_API; x_pixels_per_inch: POINTER; y_pixels_per_inch: POINTER) 
		do
			c_cairo_surface_get_fallback_resolution (surface.item, x_pixels_per_inch, y_pixels_per_inch)
		ensure
			instance_free: class
		end

	cairo_surface_copy_page (surface: CAIRO_SURFACE_STRUCT_API) 
		do
			c_cairo_surface_copy_page (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_show_page (surface: CAIRO_SURFACE_STRUCT_API) 
		do
			c_cairo_surface_show_page (surface.item)
		ensure
			instance_free: class
		end

	cairo_surface_has_show_text_glyphs (surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_surface_has_show_text_glyphs (surface.item)
		ensure
			instance_free: class
		end

	cairo_image_surface_create (format: INTEGER; width: INTEGER; height: INTEGER): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_image_surface_create (format, width, height) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_format_stride_for_width (format: INTEGER; width: INTEGER): INTEGER 
		do
			Result := c_cairo_format_stride_for_width (format, width)
		ensure
			instance_free: class
		end

	cairo_image_surface_create_for_data (data: STRING_8; format: INTEGER; width: INTEGER; height: INTEGER; stride: INTEGER): detachable CAIRO_SURFACE_STRUCT_API 
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			if attached c_cairo_image_surface_create_for_data (data_c_string.item, format, width, height, stride) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_image_surface_get_data (surface: CAIRO_SURFACE_STRUCT_API): POINTER 
		do
			Result := c_cairo_image_surface_get_data (surface.item)
		ensure
			instance_free: class
		end

	cairo_image_surface_get_format (surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_image_surface_get_format (surface.item)
		ensure
			instance_free: class
		end

	cairo_image_surface_get_width (surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_image_surface_get_width (surface.item)
		ensure
			instance_free: class
		end

	cairo_image_surface_get_height (surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_image_surface_get_height (surface.item)
		ensure
			instance_free: class
		end

	cairo_image_surface_get_stride (surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_image_surface_get_stride (surface.item)
		ensure
			instance_free: class
		end

	cairo_image_surface_create_from_png (filename: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_image_surface_create_from_png ((char const*)$filename);
			]"
		end

	cairo_image_surface_create_from_png_stream (read_func: POINTER; closure: POINTER): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_image_surface_create_from_png_stream (read_func, closure) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_recording_surface_create (content: INTEGER; extents: CAIRO_RECTANGLE_STRUCT_API): detachable CAIRO_SURFACE_STRUCT_API 
		do
			if attached c_cairo_recording_surface_create (content, extents.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_recording_surface_ink_extents (surface: CAIRO_SURFACE_STRUCT_API; x0: POINTER; y0: POINTER; width: POINTER; height: POINTER) 
		do
			c_cairo_recording_surface_ink_extents (surface.item, x0, y0, width, height)
		ensure
			instance_free: class
		end

	cairo_recording_surface_get_extents (surface: CAIRO_SURFACE_STRUCT_API; extents: CAIRO_RECTANGLE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_recording_surface_get_extents (surface.item, extents.item)
		ensure
			instance_free: class
		end

	cairo_pattern_create_raster_source (user_data: POINTER; content: INTEGER; width: INTEGER; height: INTEGER): detachable CAIRO_PATTERN_STRUCT_API 
		do
			if attached c_cairo_pattern_create_raster_source (user_data, content, width, height) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_set_callback_data (pattern: CAIRO_PATTERN_STRUCT_API; data: POINTER) 
		do
			c_cairo_raster_source_pattern_set_callback_data (pattern.item, data)
		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_get_callback_data (pattern: CAIRO_PATTERN_STRUCT_API): POINTER 
		do
			Result := c_cairo_raster_source_pattern_get_callback_data (pattern.item)
		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_set_acquire (pattern: CAIRO_PATTERN_STRUCT_API; acquire: POINTER; release: POINTER) 
		do
			c_cairo_raster_source_pattern_set_acquire (pattern.item, acquire, release)
		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_get_acquire (pattern: CAIRO_PATTERN_STRUCT_API; acquire: POINTER; release: POINTER) 
		do
			c_cairo_raster_source_pattern_get_acquire (pattern.item, acquire, release)
		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_set_snapshot (pattern: CAIRO_PATTERN_STRUCT_API; snapshot: POINTER) 
		do
			c_cairo_raster_source_pattern_set_snapshot (pattern.item, snapshot)
		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_get_snapshot (pattern: CAIRO_PATTERN_STRUCT_API): POINTER 
		do
			Result := c_cairo_raster_source_pattern_get_snapshot (pattern.item)
		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_set_copy (pattern: CAIRO_PATTERN_STRUCT_API; a_copy: POINTER) 
		do
			c_cairo_raster_source_pattern_set_copy (pattern.item, a_copy)
		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_get_copy (pattern: CAIRO_PATTERN_STRUCT_API): POINTER 
		do
			Result := c_cairo_raster_source_pattern_get_copy (pattern.item)
		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_set_finish (pattern: CAIRO_PATTERN_STRUCT_API; finish: POINTER) 
		do
			c_cairo_raster_source_pattern_set_finish (pattern.item, finish)
		ensure
			instance_free: class
		end

	cairo_raster_source_pattern_get_finish (pattern: CAIRO_PATTERN_STRUCT_API): POINTER 
		do
			Result := c_cairo_raster_source_pattern_get_finish (pattern.item)
		ensure
			instance_free: class
		end

	cairo_pattern_create_rgb (red: REAL_64; green: REAL_64; blue: REAL_64): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_create_rgb ((double)$red, (double)$green, (double)$blue);
			]"
		end

	cairo_pattern_create_rgba (red: REAL_64; green: REAL_64; blue: REAL_64; alpha: REAL_64): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_create_rgba ((double)$red, (double)$green, (double)$blue, (double)$alpha);
			]"
		end

	cairo_pattern_create_for_surface (surface: CAIRO_SURFACE_STRUCT_API): detachable CAIRO_PATTERN_STRUCT_API 
		do
			if attached c_cairo_pattern_create_for_surface (surface.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_pattern_create_linear (x0: REAL_64; y0: REAL_64; x1: REAL_64; y1: REAL_64): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_create_linear ((double)$x0, (double)$y0, (double)$x1, (double)$y1);
			]"
		end

	cairo_pattern_create_radial (cx0: REAL_64; cy0: REAL_64; radius0: REAL_64; cx1: REAL_64; cy1: REAL_64; radius1: REAL_64): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_create_radial ((double)$cx0, (double)$cy0, (double)$radius0, (double)$cx1, (double)$cy1, (double)$radius1);
			]"
		end

	cairo_pattern_create_mesh: detachable CAIRO_PATTERN_STRUCT_API 
		do
			if attached c_cairo_pattern_create_mesh as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_pattern_reference (pattern: CAIRO_PATTERN_STRUCT_API): detachable CAIRO_PATTERN_STRUCT_API 
		do
			if attached c_cairo_pattern_reference (pattern.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_pattern_destroy (pattern: CAIRO_PATTERN_STRUCT_API) 
		do
			c_cairo_pattern_destroy (pattern.item)
		ensure
			instance_free: class
		end

	cairo_pattern_get_reference_count (pattern: CAIRO_PATTERN_STRUCT_API): INTEGER 
		do
			Result := c_cairo_pattern_get_reference_count (pattern.item)
		ensure
			instance_free: class
		end

	cairo_pattern_status (pattern: CAIRO_PATTERN_STRUCT_API): INTEGER 
		do
			Result := c_cairo_pattern_status (pattern.item)
		ensure
			instance_free: class
		end

	cairo_pattern_get_user_data (pattern: CAIRO_PATTERN_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API): POINTER 
		do
			Result := c_cairo_pattern_get_user_data (pattern.item, key.item)
		ensure
			instance_free: class
		end

	cairo_pattern_set_user_data (pattern: CAIRO_PATTERN_STRUCT_API; key: CAIRO_USER_DATA_KEY_STRUCT_API; user_data: POINTER; destroy: POINTER): INTEGER 
		do
			Result := c_cairo_pattern_set_user_data (pattern.item, key.item, user_data, destroy)
		ensure
			instance_free: class
		end

	cairo_pattern_get_type (pattern: CAIRO_PATTERN_STRUCT_API): INTEGER 
		do
			Result := c_cairo_pattern_get_type (pattern.item)
		ensure
			instance_free: class
		end

	cairo_pattern_add_color_stop_rgb (pattern: CAIRO_PATTERN_STRUCT_API; offset: REAL_64; red: REAL_64; green: REAL_64; blue: REAL_64) 
		do
			c_cairo_pattern_add_color_stop_rgb (pattern.item, offset, red, green, blue)
		ensure
			instance_free: class
		end

	cairo_pattern_add_color_stop_rgba (pattern: CAIRO_PATTERN_STRUCT_API; offset: REAL_64; red: REAL_64; green: REAL_64; blue: REAL_64; alpha: REAL_64) 
		do
			c_cairo_pattern_add_color_stop_rgba (pattern.item, offset, red, green, blue, alpha)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_begin_patch (pattern: CAIRO_PATTERN_STRUCT_API) 
		do
			c_cairo_mesh_pattern_begin_patch (pattern.item)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_end_patch (pattern: CAIRO_PATTERN_STRUCT_API) 
		do
			c_cairo_mesh_pattern_end_patch (pattern.item)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_curve_to (pattern: CAIRO_PATTERN_STRUCT_API; x1: REAL_64; y1: REAL_64; x2: REAL_64; y2: REAL_64; x3: REAL_64; y3: REAL_64) 
		do
			c_cairo_mesh_pattern_curve_to (pattern.item, x1, y1, x2, y2, x3, y3)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_line_to (pattern: CAIRO_PATTERN_STRUCT_API; x: REAL_64; y: REAL_64) 
		do
			c_cairo_mesh_pattern_line_to (pattern.item, x, y)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_move_to (pattern: CAIRO_PATTERN_STRUCT_API; x: REAL_64; y: REAL_64) 
		do
			c_cairo_mesh_pattern_move_to (pattern.item, x, y)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_set_control_point (pattern: CAIRO_PATTERN_STRUCT_API; point_num: INTEGER; x: REAL_64; y: REAL_64) 
		do
			c_cairo_mesh_pattern_set_control_point (pattern.item, point_num, x, y)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_set_corner_color_rgb (pattern: CAIRO_PATTERN_STRUCT_API; corner_num: INTEGER; red: REAL_64; green: REAL_64; blue: REAL_64) 
		do
			c_cairo_mesh_pattern_set_corner_color_rgb (pattern.item, corner_num, red, green, blue)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_set_corner_color_rgba (pattern: CAIRO_PATTERN_STRUCT_API; corner_num: INTEGER; red: REAL_64; green: REAL_64; blue: REAL_64; alpha: REAL_64) 
		do
			c_cairo_mesh_pattern_set_corner_color_rgba (pattern.item, corner_num, red, green, blue, alpha)
		ensure
			instance_free: class
		end

	cairo_pattern_set_matrix (pattern: CAIRO_PATTERN_STRUCT_API; matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_pattern_set_matrix (pattern.item, matrix.item)
		ensure
			instance_free: class
		end

	cairo_pattern_get_matrix (pattern: CAIRO_PATTERN_STRUCT_API; matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_pattern_get_matrix (pattern.item, matrix.item)
		ensure
			instance_free: class
		end

	cairo_pattern_set_extend (pattern: CAIRO_PATTERN_STRUCT_API; extend: INTEGER) 
		do
			c_cairo_pattern_set_extend (pattern.item, extend)
		ensure
			instance_free: class
		end

	cairo_pattern_get_extend (pattern: CAIRO_PATTERN_STRUCT_API): INTEGER 
		do
			Result := c_cairo_pattern_get_extend (pattern.item)
		ensure
			instance_free: class
		end

	cairo_pattern_set_filter (pattern: CAIRO_PATTERN_STRUCT_API; filter: INTEGER) 
		do
			c_cairo_pattern_set_filter (pattern.item, filter)
		ensure
			instance_free: class
		end

	cairo_pattern_get_filter (pattern: CAIRO_PATTERN_STRUCT_API): INTEGER 
		do
			Result := c_cairo_pattern_get_filter (pattern.item)
		ensure
			instance_free: class
		end

	cairo_pattern_get_rgba (pattern: CAIRO_PATTERN_STRUCT_API; red: POINTER; green: POINTER; blue: POINTER; alpha: POINTER): INTEGER 
		do
			Result := c_cairo_pattern_get_rgba (pattern.item, red, green, blue, alpha)
		ensure
			instance_free: class
		end

	cairo_pattern_get_surface (pattern: CAIRO_PATTERN_STRUCT_API; surface: CAIRO_SURFACE_STRUCT_API): INTEGER 
		do
			Result := c_cairo_pattern_get_surface (pattern.item, surface.item)
		ensure
			instance_free: class
		end

	cairo_pattern_get_color_stop_rgba (pattern: CAIRO_PATTERN_STRUCT_API; index: INTEGER; offset: POINTER; red: POINTER; green: POINTER; blue: POINTER; alpha: POINTER): INTEGER 
		do
			Result := c_cairo_pattern_get_color_stop_rgba (pattern.item, index, offset, red, green, blue, alpha)
		ensure
			instance_free: class
		end

	cairo_pattern_get_color_stop_count (pattern: CAIRO_PATTERN_STRUCT_API; count: POINTER): INTEGER 
		do
			Result := c_cairo_pattern_get_color_stop_count (pattern.item, count)
		ensure
			instance_free: class
		end

	cairo_pattern_get_linear_points (pattern: CAIRO_PATTERN_STRUCT_API; x0: POINTER; y0: POINTER; x1: POINTER; y1: POINTER): INTEGER 
		do
			Result := c_cairo_pattern_get_linear_points (pattern.item, x0, y0, x1, y1)
		ensure
			instance_free: class
		end

	cairo_pattern_get_radial_circles (pattern: CAIRO_PATTERN_STRUCT_API; x0: POINTER; y0: POINTER; r0: POINTER; x1: POINTER; y1: POINTER; r1: POINTER): INTEGER 
		do
			Result := c_cairo_pattern_get_radial_circles (pattern.item, x0, y0, r0, x1, y1, r1)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_get_patch_count (pattern: CAIRO_PATTERN_STRUCT_API; count: POINTER): INTEGER 
		do
			Result := c_cairo_mesh_pattern_get_patch_count (pattern.item, count)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_get_path (pattern: CAIRO_PATTERN_STRUCT_API; patch_num: INTEGER): detachable CAIRO_PATH_STRUCT_API 
		do
			if attached c_cairo_mesh_pattern_get_path (pattern.item, patch_num) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_mesh_pattern_get_corner_color_rgba (pattern: CAIRO_PATTERN_STRUCT_API; patch_num: INTEGER; corner_num: INTEGER; red: POINTER; green: POINTER; blue: POINTER; alpha: POINTER): INTEGER 
		do
			Result := c_cairo_mesh_pattern_get_corner_color_rgba (pattern.item, patch_num, corner_num, red, green, blue, alpha)
		ensure
			instance_free: class
		end

	cairo_mesh_pattern_get_control_point (pattern: CAIRO_PATTERN_STRUCT_API; patch_num: INTEGER; point_num: INTEGER; x: POINTER; y: POINTER): INTEGER 
		do
			Result := c_cairo_mesh_pattern_get_control_point (pattern.item, patch_num, point_num, x, y)
		ensure
			instance_free: class
		end

	cairo_matrix_init (matrix: CAIRO_MATRIX_STRUCT_API; xx: REAL_64; yx: REAL_64; xy: REAL_64; yy: REAL_64; x0: REAL_64; y0: REAL_64) 
		do
			c_cairo_matrix_init (matrix.item, xx, yx, xy, yy, x0, y0)
		ensure
			instance_free: class
		end

	cairo_matrix_init_identity (matrix: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_matrix_init_identity (matrix.item)
		ensure
			instance_free: class
		end

	cairo_matrix_init_translate (matrix: CAIRO_MATRIX_STRUCT_API; tx: REAL_64; ty: REAL_64) 
		do
			c_cairo_matrix_init_translate (matrix.item, tx, ty)
		ensure
			instance_free: class
		end

	cairo_matrix_init_scale (matrix: CAIRO_MATRIX_STRUCT_API; sx: REAL_64; sy: REAL_64) 
		do
			c_cairo_matrix_init_scale (matrix.item, sx, sy)
		ensure
			instance_free: class
		end

	cairo_matrix_init_rotate (matrix: CAIRO_MATRIX_STRUCT_API; radians: REAL_64) 
		do
			c_cairo_matrix_init_rotate (matrix.item, radians)
		ensure
			instance_free: class
		end

	cairo_matrix_translate (matrix: CAIRO_MATRIX_STRUCT_API; tx: REAL_64; ty: REAL_64) 
		do
			c_cairo_matrix_translate (matrix.item, tx, ty)
		ensure
			instance_free: class
		end

	cairo_matrix_scale (matrix: CAIRO_MATRIX_STRUCT_API; sx: REAL_64; sy: REAL_64) 
		do
			c_cairo_matrix_scale (matrix.item, sx, sy)
		ensure
			instance_free: class
		end

	cairo_matrix_rotate (matrix: CAIRO_MATRIX_STRUCT_API; radians: REAL_64) 
		do
			c_cairo_matrix_rotate (matrix.item, radians)
		ensure
			instance_free: class
		end

	cairo_matrix_invert (matrix: CAIRO_MATRIX_STRUCT_API): INTEGER 
		do
			Result := c_cairo_matrix_invert (matrix.item)
		ensure
			instance_free: class
		end

	cairo_matrix_multiply (a_result: CAIRO_MATRIX_STRUCT_API; a: CAIRO_MATRIX_STRUCT_API; b: CAIRO_MATRIX_STRUCT_API) 
		do
			c_cairo_matrix_multiply (a_result.item, a.item, b.item)
		ensure
			instance_free: class
		end

	cairo_matrix_transform_distance (matrix: CAIRO_MATRIX_STRUCT_API; dx: POINTER; dy: POINTER) 
		do
			c_cairo_matrix_transform_distance (matrix.item, dx, dy)
		ensure
			instance_free: class
		end

	cairo_matrix_transform_point (matrix: CAIRO_MATRIX_STRUCT_API; x: POINTER; y: POINTER) 
		do
			c_cairo_matrix_transform_point (matrix.item, x, y)
		ensure
			instance_free: class
		end

	cairo_region_create: detachable CAIRO_REGION_STRUCT_API 
		do
			if attached c_cairo_region_create as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_region_create_rectangle (rectangle: CAIRO_RECTANGLE_INT_STRUCT_API): detachable CAIRO_REGION_STRUCT_API 
		do
			if attached c_cairo_region_create_rectangle (rectangle.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_region_create_rectangles (rects: CAIRO_RECTANGLE_INT_STRUCT_API; count: INTEGER): detachable CAIRO_REGION_STRUCT_API 
		do
			if attached c_cairo_region_create_rectangles (rects.item, count) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_region_copy (original: CAIRO_REGION_STRUCT_API): detachable CAIRO_REGION_STRUCT_API 
		do
			if attached c_cairo_region_copy (original.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_region_reference (region: CAIRO_REGION_STRUCT_API): detachable CAIRO_REGION_STRUCT_API 
		do
			if attached c_cairo_region_reference (region.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	cairo_region_destroy (region: CAIRO_REGION_STRUCT_API) 
		do
			c_cairo_region_destroy (region.item)
		ensure
			instance_free: class
		end

	cairo_region_equal (a: CAIRO_REGION_STRUCT_API; b: CAIRO_REGION_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_equal (a.item, b.item)
		ensure
			instance_free: class
		end

	cairo_region_status (region: CAIRO_REGION_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_status (region.item)
		ensure
			instance_free: class
		end

	cairo_region_get_extents (region: CAIRO_REGION_STRUCT_API; extents: CAIRO_RECTANGLE_INT_STRUCT_API) 
		do
			c_cairo_region_get_extents (region.item, extents.item)
		ensure
			instance_free: class
		end

	cairo_region_num_rectangles (region: CAIRO_REGION_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_num_rectangles (region.item)
		ensure
			instance_free: class
		end

	cairo_region_get_rectangle (region: CAIRO_REGION_STRUCT_API; nth: INTEGER; rectangle: CAIRO_RECTANGLE_INT_STRUCT_API) 
		do
			c_cairo_region_get_rectangle (region.item, nth, rectangle.item)
		ensure
			instance_free: class
		end

	cairo_region_is_empty (region: CAIRO_REGION_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_is_empty (region.item)
		ensure
			instance_free: class
		end

	cairo_region_contains_rectangle (region: CAIRO_REGION_STRUCT_API; rectangle: CAIRO_RECTANGLE_INT_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_contains_rectangle (region.item, rectangle.item)
		ensure
			instance_free: class
		end

	cairo_region_contains_point (region: CAIRO_REGION_STRUCT_API; x: INTEGER; y: INTEGER): INTEGER 
		do
			Result := c_cairo_region_contains_point (region.item, x, y)
		ensure
			instance_free: class
		end

	cairo_region_translate (region: CAIRO_REGION_STRUCT_API; dx: INTEGER; dy: INTEGER) 
		do
			c_cairo_region_translate (region.item, dx, dy)
		ensure
			instance_free: class
		end

	cairo_region_subtract (dst: CAIRO_REGION_STRUCT_API; other: CAIRO_REGION_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_subtract (dst.item, other.item)
		ensure
			instance_free: class
		end

	cairo_region_subtract_rectangle (dst: CAIRO_REGION_STRUCT_API; rectangle: CAIRO_RECTANGLE_INT_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_subtract_rectangle (dst.item, rectangle.item)
		ensure
			instance_free: class
		end

	cairo_region_intersect (dst: CAIRO_REGION_STRUCT_API; other: CAIRO_REGION_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_intersect (dst.item, other.item)
		ensure
			instance_free: class
		end

	cairo_region_intersect_rectangle (dst: CAIRO_REGION_STRUCT_API; rectangle: CAIRO_RECTANGLE_INT_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_intersect_rectangle (dst.item, rectangle.item)
		ensure
			instance_free: class
		end

	cairo_region_union (dst: CAIRO_REGION_STRUCT_API; other: CAIRO_REGION_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_union (dst.item, other.item)
		ensure
			instance_free: class
		end

	cairo_region_union_rectangle (dst: CAIRO_REGION_STRUCT_API; rectangle: CAIRO_RECTANGLE_INT_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_union_rectangle (dst.item, rectangle.item)
		ensure
			instance_free: class
		end

	cairo_region_xor (dst: CAIRO_REGION_STRUCT_API; other: CAIRO_REGION_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_xor (dst.item, other.item)
		ensure
			instance_free: class
		end

	cairo_region_xor_rectangle (dst: CAIRO_REGION_STRUCT_API; rectangle: CAIRO_RECTANGLE_INT_STRUCT_API): INTEGER 
		do
			Result := c_cairo_region_xor_rectangle (dst.item, rectangle.item)
		ensure
			instance_free: class
		end

	cairo_debug_reset_static_data
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_debug_reset_static_data ();
			]"
		end

feature -- Externals

	c_cairo_create (target: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_create ((cairo_surface_t*)$target);
			]"
		end

	c_cairo_reference (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_reference ((cairo_t*)$cr);
			]"
		end

	c_cairo_destroy (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_destroy ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_reference_count (cr: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_reference_count ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_user_data (cr: POINTER; key: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_user_data ((cairo_t*)$cr, (cairo_user_data_key_t const*)$key);
			]"
		end

	c_cairo_set_user_data (cr: POINTER; key: POINTER; user_data: POINTER; destroy: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_set_user_data ((cairo_t*)$cr, (cairo_user_data_key_t const*)$key, (void*)$user_data, (cairo_destroy_func_t)$destroy);
			]"
		end

	c_cairo_save (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_save ((cairo_t*)$cr);
			]"
		end

	c_cairo_restore (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_restore ((cairo_t*)$cr);
			]"
		end

	c_cairo_push_group (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_push_group ((cairo_t*)$cr);
			]"
		end

	c_cairo_push_group_with_content (cr: POINTER; content: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_push_group_with_content ((cairo_t*)$cr, (cairo_content_t)$content);
			]"
		end

	c_cairo_pop_group (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pop_group ((cairo_t*)$cr);
			]"
		end

	c_cairo_pop_group_to_source (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_pop_group_to_source ((cairo_t*)$cr);
			]"
		end

	c_cairo_set_operator (cr: POINTER; op: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_operator ((cairo_t*)$cr, (cairo_operator_t)$op);
			]"
		end

	c_cairo_set_source (cr: POINTER; source: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_source ((cairo_t*)$cr, (cairo_pattern_t*)$source);
			]"
		end

	c_cairo_set_source_rgb (cr: POINTER; red: REAL_64; green: REAL_64; blue: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_source_rgb ((cairo_t*)$cr, (double)$red, (double)$green, (double)$blue);
			]"
		end

	c_cairo_set_source_rgba (cr: POINTER; red: REAL_64; green: REAL_64; blue: REAL_64; alpha: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_source_rgba ((cairo_t*)$cr, (double)$red, (double)$green, (double)$blue, (double)$alpha);
			]"
		end

	c_cairo_set_source_surface (cr: POINTER; surface: POINTER; x: REAL_64; y: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_source_surface ((cairo_t*)$cr, (cairo_surface_t*)$surface, (double)$x, (double)$y);
			]"
		end

	c_cairo_set_tolerance (cr: POINTER; tolerance: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_tolerance ((cairo_t*)$cr, (double)$tolerance);
			]"
		end

	c_cairo_set_antialias (cr: POINTER; antialias: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_antialias ((cairo_t*)$cr, (cairo_antialias_t)$antialias);
			]"
		end

	c_cairo_set_fill_rule (cr: POINTER; fill_rule: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_fill_rule ((cairo_t*)$cr, (cairo_fill_rule_t)$fill_rule);
			]"
		end

	c_cairo_set_line_width (cr: POINTER; width: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_line_width ((cairo_t*)$cr, (double)$width);
			]"
		end

	c_cairo_set_line_cap (cr: POINTER; line_cap: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_line_cap ((cairo_t*)$cr, (cairo_line_cap_t)$line_cap);
			]"
		end

	c_cairo_set_line_join (cr: POINTER; line_join: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_line_join ((cairo_t*)$cr, (cairo_line_join_t)$line_join);
			]"
		end

	c_cairo_set_dash (cr: POINTER; dashes: POINTER; num_dashes: INTEGER; offset: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_dash ((cairo_t*)$cr, (double const*)$dashes, (int)$num_dashes, (double)$offset);
			]"
		end

	c_cairo_set_miter_limit (cr: POINTER; limit: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_miter_limit ((cairo_t*)$cr, (double)$limit);
			]"
		end

	c_cairo_translate (cr: POINTER; tx: REAL_64; ty: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_translate ((cairo_t*)$cr, (double)$tx, (double)$ty);
			]"
		end

	c_cairo_scale (cr: POINTER; sx: REAL_64; sy: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_scale ((cairo_t*)$cr, (double)$sx, (double)$sy);
			]"
		end

	c_cairo_rotate (cr: POINTER; angle: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_rotate ((cairo_t*)$cr, (double)$angle);
			]"
		end

	c_cairo_transform (cr: POINTER; matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_transform ((cairo_t*)$cr, (cairo_matrix_t const*)$matrix);
			]"
		end

	c_cairo_set_matrix (cr: POINTER; matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_matrix ((cairo_t*)$cr, (cairo_matrix_t const*)$matrix);
			]"
		end

	c_cairo_identity_matrix (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_identity_matrix ((cairo_t*)$cr);
			]"
		end

	c_cairo_user_to_device (cr: POINTER; x: POINTER; y: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_user_to_device ((cairo_t*)$cr, (double*)$x, (double*)$y);
			]"
		end

	c_cairo_user_to_device_distance (cr: POINTER; dx: POINTER; dy: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_user_to_device_distance ((cairo_t*)$cr, (double*)$dx, (double*)$dy);
			]"
		end

	c_cairo_device_to_user (cr: POINTER; x: POINTER; y: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_device_to_user ((cairo_t*)$cr, (double*)$x, (double*)$y);
			]"
		end

	c_cairo_device_to_user_distance (cr: POINTER; dx: POINTER; dy: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_device_to_user_distance ((cairo_t*)$cr, (double*)$dx, (double*)$dy);
			]"
		end

	c_cairo_new_path (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_new_path ((cairo_t*)$cr);
			]"
		end

	c_cairo_move_to (cr: POINTER; x: REAL_64; y: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_move_to ((cairo_t*)$cr, (double)$x, (double)$y);
			]"
		end

	c_cairo_new_sub_path (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_new_sub_path ((cairo_t*)$cr);
			]"
		end

	c_cairo_line_to (cr: POINTER; x: REAL_64; y: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_line_to ((cairo_t*)$cr, (double)$x, (double)$y);
			]"
		end

	c_cairo_curve_to (cr: POINTER; x1: REAL_64; y1: REAL_64; x2: REAL_64; y2: REAL_64; x3: REAL_64; y3: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_curve_to ((cairo_t*)$cr, (double)$x1, (double)$y1, (double)$x2, (double)$y2, (double)$x3, (double)$y3);
			]"
		end

	c_cairo_arc (cr: POINTER; xc: REAL_64; yc: REAL_64; radius: REAL_64; angle1: REAL_64; angle2: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_arc ((cairo_t*)$cr, (double)$xc, (double)$yc, (double)$radius, (double)$angle1, (double)$angle2);
			]"
		end

	c_cairo_arc_negative (cr: POINTER; xc: REAL_64; yc: REAL_64; radius: REAL_64; angle1: REAL_64; angle2: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_arc_negative ((cairo_t*)$cr, (double)$xc, (double)$yc, (double)$radius, (double)$angle1, (double)$angle2);
			]"
		end

	c_cairo_rel_move_to (cr: POINTER; dx: REAL_64; dy: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_rel_move_to ((cairo_t*)$cr, (double)$dx, (double)$dy);
			]"
		end

	c_cairo_rel_line_to (cr: POINTER; dx: REAL_64; dy: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_rel_line_to ((cairo_t*)$cr, (double)$dx, (double)$dy);
			]"
		end

	c_cairo_rel_curve_to (cr: POINTER; dx1: REAL_64; dy1: REAL_64; dx2: REAL_64; dy2: REAL_64; dx3: REAL_64; dy3: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_rel_curve_to ((cairo_t*)$cr, (double)$dx1, (double)$dy1, (double)$dx2, (double)$dy2, (double)$dx3, (double)$dy3);
			]"
		end

	c_cairo_rectangle (cr: POINTER; x: REAL_64; y: REAL_64; width: REAL_64; height: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_rectangle ((cairo_t*)$cr, (double)$x, (double)$y, (double)$width, (double)$height);
			]"
		end

	c_cairo_close_path (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_close_path ((cairo_t*)$cr);
			]"
		end

	c_cairo_path_extents (cr: POINTER; x1: POINTER; y1: POINTER; x2: POINTER; y2: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_path_extents ((cairo_t*)$cr, (double*)$x1, (double*)$y1, (double*)$x2, (double*)$y2);
			]"
		end

	c_cairo_paint (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_paint ((cairo_t*)$cr);
			]"
		end

	c_cairo_paint_with_alpha (cr: POINTER; alpha: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_paint_with_alpha ((cairo_t*)$cr, (double)$alpha);
			]"
		end

	c_cairo_mask (cr: POINTER; pattern: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mask ((cairo_t*)$cr, (cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_mask_surface (cr: POINTER; surface: POINTER; surface_x: REAL_64; surface_y: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mask_surface ((cairo_t*)$cr, (cairo_surface_t*)$surface, (double)$surface_x, (double)$surface_y);
			]"
		end

	c_cairo_stroke (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_stroke ((cairo_t*)$cr);
			]"
		end

	c_cairo_stroke_preserve (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_stroke_preserve ((cairo_t*)$cr);
			]"
		end

	c_cairo_fill (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_fill ((cairo_t*)$cr);
			]"
		end

	c_cairo_fill_preserve (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_fill_preserve ((cairo_t*)$cr);
			]"
		end

	c_cairo_copy_page (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_copy_page ((cairo_t*)$cr);
			]"
		end

	c_cairo_show_page (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_show_page ((cairo_t*)$cr);
			]"
		end

	c_cairo_in_stroke (cr: POINTER; x: REAL_64; y: REAL_64): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_in_stroke ((cairo_t*)$cr, (double)$x, (double)$y);
			]"
		end

	c_cairo_in_fill (cr: POINTER; x: REAL_64; y: REAL_64): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_in_fill ((cairo_t*)$cr, (double)$x, (double)$y);
			]"
		end

	c_cairo_in_clip (cr: POINTER; x: REAL_64; y: REAL_64): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_in_clip ((cairo_t*)$cr, (double)$x, (double)$y);
			]"
		end

	c_cairo_stroke_extents (cr: POINTER; x1: POINTER; y1: POINTER; x2: POINTER; y2: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_stroke_extents ((cairo_t*)$cr, (double*)$x1, (double*)$y1, (double*)$x2, (double*)$y2);
			]"
		end

	c_cairo_fill_extents (cr: POINTER; x1: POINTER; y1: POINTER; x2: POINTER; y2: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_fill_extents ((cairo_t*)$cr, (double*)$x1, (double*)$y1, (double*)$x2, (double*)$y2);
			]"
		end

	c_cairo_reset_clip (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_reset_clip ((cairo_t*)$cr);
			]"
		end

	c_cairo_clip (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_clip ((cairo_t*)$cr);
			]"
		end

	c_cairo_clip_preserve (cr: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_clip_preserve ((cairo_t*)$cr);
			]"
		end

	c_cairo_clip_extents (cr: POINTER; x1: POINTER; y1: POINTER; x2: POINTER; y2: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_clip_extents ((cairo_t*)$cr, (double*)$x1, (double*)$y1, (double*)$x2, (double*)$y2);
			]"
		end

	c_cairo_copy_clip_rectangle_list (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_copy_clip_rectangle_list ((cairo_t*)$cr);
			]"
		end

	c_cairo_rectangle_list_destroy (rectangle_list: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_rectangle_list_destroy ((cairo_rectangle_list_t*)$rectangle_list);
			]"
		end

	c_cairo_tag_begin (cr: POINTER; tag_name: POINTER; attributes: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_tag_begin ((cairo_t*)$cr, (char const*)$tag_name, (char const*)$attributes);
			]"
		end

	c_cairo_tag_end (cr: POINTER; tag_name: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_tag_end ((cairo_t*)$cr, (char const*)$tag_name);
			]"
		end

	c_cairo_glyph_free (glyphs: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_glyph_free ((cairo_glyph_t*)$glyphs);
			]"
		end

	c_cairo_text_cluster_free (clusters: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_text_cluster_free ((cairo_text_cluster_t*)$clusters);
			]"
		end

	c_cairo_font_options_create: POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_create ();
			]"
		end

	c_cairo_font_options_copy (original: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_copy ((cairo_font_options_t const*)$original);
			]"
		end

	c_cairo_font_options_destroy (options: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_font_options_destroy ((cairo_font_options_t*)$options);
			]"
		end

	c_cairo_font_options_status (options: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_status ((cairo_font_options_t*)$options);
			]"
		end

	c_cairo_font_options_merge (options: POINTER; other: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_font_options_merge ((cairo_font_options_t*)$options, (cairo_font_options_t const*)$other);
			]"
		end

	c_cairo_font_options_equal (options: POINTER; other: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_equal ((cairo_font_options_t const*)$options, (cairo_font_options_t const*)$other);
			]"
		end

	c_cairo_font_options_hash (options: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_hash ((cairo_font_options_t const*)$options);
			]"
		end

	c_cairo_font_options_set_antialias (options: POINTER; antialias: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_font_options_set_antialias ((cairo_font_options_t*)$options, (cairo_antialias_t)$antialias);
			]"
		end

	c_cairo_font_options_get_antialias (options: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_get_antialias ((cairo_font_options_t const*)$options);
			]"
		end

	c_cairo_font_options_set_subpixel_order (options: POINTER; subpixel_order: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_font_options_set_subpixel_order ((cairo_font_options_t*)$options, (cairo_subpixel_order_t)$subpixel_order);
			]"
		end

	c_cairo_font_options_get_subpixel_order (options: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_get_subpixel_order ((cairo_font_options_t const*)$options);
			]"
		end

	c_cairo_font_options_set_hint_style (options: POINTER; hint_style: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_font_options_set_hint_style ((cairo_font_options_t*)$options, (cairo_hint_style_t)$hint_style);
			]"
		end

	c_cairo_font_options_get_hint_style (options: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_get_hint_style ((cairo_font_options_t const*)$options);
			]"
		end

	c_cairo_font_options_set_hint_metrics (options: POINTER; hint_metrics: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_font_options_set_hint_metrics ((cairo_font_options_t*)$options, (cairo_hint_metrics_t)$hint_metrics);
			]"
		end

	c_cairo_font_options_get_hint_metrics (options: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_get_hint_metrics ((cairo_font_options_t const*)$options);
			]"
		end

	c_cairo_font_options_get_variations (options: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_options_get_variations ((cairo_font_options_t*)$options);
			]"
		end

	c_cairo_font_options_set_variations (options: POINTER; variations: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_font_options_set_variations ((cairo_font_options_t*)$options, (char const*)$variations);
			]"
		end

	c_cairo_select_font_face (cr: POINTER; family: POINTER; slant: INTEGER; weight: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_select_font_face ((cairo_t*)$cr, (char const*)$family, (cairo_font_slant_t)$slant, (cairo_font_weight_t)$weight);
			]"
		end

	c_cairo_set_font_size (cr: POINTER; size: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_font_size ((cairo_t*)$cr, (double)$size);
			]"
		end

	c_cairo_set_font_matrix (cr: POINTER; matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_font_matrix ((cairo_t*)$cr, (cairo_matrix_t const*)$matrix);
			]"
		end

	c_cairo_get_font_matrix (cr: POINTER; matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_get_font_matrix ((cairo_t*)$cr, (cairo_matrix_t*)$matrix);
			]"
		end

	c_cairo_set_font_options (cr: POINTER; options: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_font_options ((cairo_t*)$cr, (cairo_font_options_t const*)$options);
			]"
		end

	c_cairo_get_font_options (cr: POINTER; options: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_get_font_options ((cairo_t*)$cr, (cairo_font_options_t*)$options);
			]"
		end

	c_cairo_set_font_face (cr: POINTER; font_face: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_font_face ((cairo_t*)$cr, (cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_get_font_face (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_font_face ((cairo_t*)$cr);
			]"
		end

	c_cairo_set_scaled_font (cr: POINTER; scaled_font: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_set_scaled_font ((cairo_t*)$cr, (cairo_scaled_font_t const*)$scaled_font);
			]"
		end

	c_cairo_get_scaled_font (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_scaled_font ((cairo_t*)$cr);
			]"
		end

	c_cairo_show_text (cr: POINTER; utf8: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_show_text ((cairo_t*)$cr, (char const*)$utf8);
			]"
		end

	c_cairo_show_glyphs (cr: POINTER; glyphs: POINTER; num_glyphs: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_show_glyphs ((cairo_t*)$cr, (cairo_glyph_t const*)$glyphs, (int)$num_glyphs);
			]"
		end

	c_cairo_show_text_glyphs (cr: POINTER; utf8: POINTER; utf8_len: INTEGER; glyphs: POINTER; num_glyphs: INTEGER; clusters: POINTER; num_clusters: INTEGER; cluster_flags: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_show_text_glyphs ((cairo_t*)$cr, (char const*)$utf8, (int)$utf8_len, (cairo_glyph_t const*)$glyphs, (int)$num_glyphs, (cairo_text_cluster_t const*)$clusters, (int)$num_clusters, (cairo_text_cluster_flags_t)$cluster_flags);
			]"
		end

	c_cairo_text_path (cr: POINTER; utf8: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_text_path ((cairo_t*)$cr, (char const*)$utf8);
			]"
		end

	c_cairo_glyph_path (cr: POINTER; glyphs: POINTER; num_glyphs: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_glyph_path ((cairo_t*)$cr, (cairo_glyph_t const*)$glyphs, (int)$num_glyphs);
			]"
		end

	c_cairo_text_extents (cr: POINTER; utf8: POINTER; extents: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_text_extents ((cairo_t*)$cr, (char const*)$utf8, (cairo_text_extents_t*)$extents);
			]"
		end

	c_cairo_glyph_extents (cr: POINTER; glyphs: POINTER; num_glyphs: INTEGER; extents: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_glyph_extents ((cairo_t*)$cr, (cairo_glyph_t const*)$glyphs, (int)$num_glyphs, (cairo_text_extents_t*)$extents);
			]"
		end

	c_cairo_font_extents (cr: POINTER; extents: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_font_extents ((cairo_t*)$cr, (cairo_font_extents_t*)$extents);
			]"
		end

	c_cairo_font_face_reference (font_face: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_face_reference ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_font_face_destroy (font_face: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_font_face_destroy ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_font_face_get_reference_count (font_face: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_face_get_reference_count ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_font_face_status (font_face: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_face_status ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_font_face_get_type (font_face: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_face_get_type ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_font_face_get_user_data (font_face: POINTER; key: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_face_get_user_data ((cairo_font_face_t*)$font_face, (cairo_user_data_key_t const*)$key);
			]"
		end

	c_cairo_font_face_set_user_data (font_face: POINTER; key: POINTER; user_data: POINTER; destroy: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_font_face_set_user_data ((cairo_font_face_t*)$font_face, (cairo_user_data_key_t const*)$key, (void*)$user_data, (cairo_destroy_func_t)$destroy);
			]"
		end

	c_cairo_scaled_font_create (font_face: POINTER; font_matrix: POINTER; ctm: POINTER; options: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_scaled_font_create ((cairo_font_face_t*)$font_face, (cairo_matrix_t const*)$font_matrix, (cairo_matrix_t const*)$ctm, (cairo_font_options_t const*)$options);
			]"
		end

	c_cairo_scaled_font_reference (scaled_font: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_scaled_font_reference ((cairo_scaled_font_t*)$scaled_font);
			]"
		end

	c_cairo_scaled_font_destroy (scaled_font: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_scaled_font_destroy ((cairo_scaled_font_t*)$scaled_font);
			]"
		end

	c_cairo_scaled_font_get_reference_count (scaled_font: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_scaled_font_get_reference_count ((cairo_scaled_font_t*)$scaled_font);
			]"
		end

	c_cairo_scaled_font_status (scaled_font: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_scaled_font_status ((cairo_scaled_font_t*)$scaled_font);
			]"
		end

	c_cairo_scaled_font_get_type (scaled_font: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_scaled_font_get_type ((cairo_scaled_font_t*)$scaled_font);
			]"
		end

	c_cairo_scaled_font_get_user_data (scaled_font: POINTER; key: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_scaled_font_get_user_data ((cairo_scaled_font_t*)$scaled_font, (cairo_user_data_key_t const*)$key);
			]"
		end

	c_cairo_scaled_font_set_user_data (scaled_font: POINTER; key: POINTER; user_data: POINTER; destroy: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_scaled_font_set_user_data ((cairo_scaled_font_t*)$scaled_font, (cairo_user_data_key_t const*)$key, (void*)$user_data, (cairo_destroy_func_t)$destroy);
			]"
		end

	c_cairo_scaled_font_extents (scaled_font: POINTER; extents: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_scaled_font_extents ((cairo_scaled_font_t*)$scaled_font, (cairo_font_extents_t*)$extents);
			]"
		end

	c_cairo_scaled_font_text_extents (scaled_font: POINTER; utf8: POINTER; extents: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_scaled_font_text_extents ((cairo_scaled_font_t*)$scaled_font, (char const*)$utf8, (cairo_text_extents_t*)$extents);
			]"
		end

	c_cairo_scaled_font_glyph_extents (scaled_font: POINTER; glyphs: POINTER; num_glyphs: INTEGER; extents: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_scaled_font_glyph_extents ((cairo_scaled_font_t*)$scaled_font, (cairo_glyph_t const*)$glyphs, (int)$num_glyphs, (cairo_text_extents_t*)$extents);
			]"
		end

	c_cairo_scaled_font_text_to_glyphs (scaled_font: POINTER; x: REAL_64; y: REAL_64; utf8: POINTER; utf8_len: INTEGER; glyphs: POINTER; num_glyphs: POINTER; clusters: POINTER; num_clusters: POINTER; cluster_flags: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_scaled_font_text_to_glyphs ((cairo_scaled_font_t*)$scaled_font, (double)$x, (double)$y, (char const*)$utf8, (int)$utf8_len, (cairo_glyph_t**)$glyphs, (int*)$num_glyphs, (cairo_text_cluster_t**)$clusters, (int*)$num_clusters, (cairo_text_cluster_flags_t*)$cluster_flags);
			]"
		end

	c_cairo_scaled_font_get_font_face (scaled_font: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_scaled_font_get_font_face ((cairo_scaled_font_t*)$scaled_font);
			]"
		end

	c_cairo_scaled_font_get_font_matrix (scaled_font: POINTER; font_matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_scaled_font_get_font_matrix ((cairo_scaled_font_t*)$scaled_font, (cairo_matrix_t*)$font_matrix);
			]"
		end

	c_cairo_scaled_font_get_ctm (scaled_font: POINTER; ctm: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_scaled_font_get_ctm ((cairo_scaled_font_t*)$scaled_font, (cairo_matrix_t*)$ctm);
			]"
		end

	c_cairo_scaled_font_get_scale_matrix (scaled_font: POINTER; scale_matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_scaled_font_get_scale_matrix ((cairo_scaled_font_t*)$scaled_font, (cairo_matrix_t*)$scale_matrix);
			]"
		end

	c_cairo_scaled_font_get_font_options (scaled_font: POINTER; options: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_scaled_font_get_font_options ((cairo_scaled_font_t*)$scaled_font, (cairo_font_options_t*)$options);
			]"
		end

	c_cairo_toy_font_face_create (family: POINTER; slant: INTEGER; weight: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_toy_font_face_create ((char const*)$family, (cairo_font_slant_t)$slant, (cairo_font_weight_t)$weight);
			]"
		end

	c_cairo_toy_font_face_get_family (font_face: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_toy_font_face_get_family ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_toy_font_face_get_slant (font_face: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_toy_font_face_get_slant ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_toy_font_face_get_weight (font_face: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_toy_font_face_get_weight ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_user_font_face_create: POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_user_font_face_create ();
			]"
		end

	c_cairo_user_font_face_set_init_func (font_face: POINTER; init_func: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_user_font_face_set_init_func ((cairo_font_face_t*)$font_face, (cairo_user_scaled_font_init_func_t)$init_func);
			]"
		end

	c_cairo_user_font_face_set_render_glyph_func (font_face: POINTER; render_glyph_func: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_user_font_face_set_render_glyph_func ((cairo_font_face_t*)$font_face, (cairo_user_scaled_font_render_glyph_func_t)$render_glyph_func);
			]"
		end

	c_cairo_user_font_face_set_text_to_glyphs_func (font_face: POINTER; text_to_glyphs_func: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_user_font_face_set_text_to_glyphs_func ((cairo_font_face_t*)$font_face, (cairo_user_scaled_font_text_to_glyphs_func_t)$text_to_glyphs_func);
			]"
		end

	c_cairo_user_font_face_set_unicode_to_glyph_func (font_face: POINTER; unicode_to_glyph_func: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_user_font_face_set_unicode_to_glyph_func ((cairo_font_face_t*)$font_face, (cairo_user_scaled_font_unicode_to_glyph_func_t)$unicode_to_glyph_func);
			]"
		end

	c_cairo_user_font_face_get_init_func (font_face: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_user_font_face_get_init_func ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_user_font_face_get_render_glyph_func (font_face: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_user_font_face_get_render_glyph_func ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_user_font_face_get_text_to_glyphs_func (font_face: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_user_font_face_get_text_to_glyphs_func ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_user_font_face_get_unicode_to_glyph_func (font_face: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_user_font_face_get_unicode_to_glyph_func ((cairo_font_face_t*)$font_face);
			]"
		end

	c_cairo_get_operator (cr: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_operator ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_source (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_source ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_tolerance (cr: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_tolerance ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_antialias (cr: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_antialias ((cairo_t*)$cr);
			]"
		end

	c_cairo_has_current_point (cr: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_has_current_point ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_current_point (cr: POINTER; x: POINTER; y: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_get_current_point ((cairo_t*)$cr, (double*)$x, (double*)$y);
			]"
		end

	c_cairo_get_fill_rule (cr: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_fill_rule ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_line_width (cr: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_line_width ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_line_cap (cr: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_line_cap ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_line_join (cr: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_line_join ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_miter_limit (cr: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_miter_limit ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_dash_count (cr: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_dash_count ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_dash (cr: POINTER; dashes: POINTER; offset: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_get_dash ((cairo_t*)$cr, (double*)$dashes, (double*)$offset);
			]"
		end

	c_cairo_get_matrix (cr: POINTER; matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_get_matrix ((cairo_t*)$cr, (cairo_matrix_t*)$matrix);
			]"
		end

	c_cairo_get_target (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_target ((cairo_t*)$cr);
			]"
		end

	c_cairo_get_group_target (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_get_group_target ((cairo_t*)$cr);
			]"
		end

	c_cairo_copy_path (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_copy_path ((cairo_t*)$cr);
			]"
		end

	c_cairo_copy_path_flat (cr: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_copy_path_flat ((cairo_t*)$cr);
			]"
		end

	c_cairo_append_path (cr: POINTER; path: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_append_path ((cairo_t*)$cr, (cairo_path_t const*)$path);
			]"
		end

	c_cairo_path_destroy (path: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_path_destroy ((cairo_path_t*)$path);
			]"
		end

	c_cairo_status (cr: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_status ((cairo_t*)$cr);
			]"
		end

	c_cairo_status_to_string (status: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_status_to_string ((cairo_status_t)$status);
			]"
		end

	c_cairo_device_reference (device: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_reference ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_get_type (device: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_get_type ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_status (device: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_status ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_acquire (device: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_acquire ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_release (device: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_device_release ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_flush (device: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_device_flush ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_finish (device: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_device_finish ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_destroy (device: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_device_destroy ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_get_reference_count (device: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_get_reference_count ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_get_user_data (device: POINTER; key: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_get_user_data ((cairo_device_t*)$device, (cairo_user_data_key_t const*)$key);
			]"
		end

	c_cairo_device_set_user_data (device: POINTER; key: POINTER; user_data: POINTER; destroy: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_set_user_data ((cairo_device_t*)$device, (cairo_user_data_key_t const*)$key, (void*)$user_data, (cairo_destroy_func_t)$destroy);
			]"
		end

	c_cairo_surface_create_similar (other: POINTER; content: INTEGER; width: INTEGER; height: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_create_similar ((cairo_surface_t*)$other, (cairo_content_t)$content, (int)$width, (int)$height);
			]"
		end

	c_cairo_surface_create_similar_image (other: POINTER; format: INTEGER; width: INTEGER; height: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_create_similar_image ((cairo_surface_t*)$other, (cairo_format_t)$format, (int)$width, (int)$height);
			]"
		end

	c_cairo_surface_map_to_image (surface: POINTER; extents: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_map_to_image ((cairo_surface_t*)$surface, (cairo_rectangle_int_t const*)$extents);
			]"
		end

	c_cairo_surface_unmap_image (surface: POINTER; image: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_unmap_image ((cairo_surface_t*)$surface, (cairo_surface_t*)$image);
			]"
		end

	c_cairo_surface_create_for_rectangle (target: POINTER; x: REAL_64; y: REAL_64; width: REAL_64; height: REAL_64): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_create_for_rectangle ((cairo_surface_t*)$target, (double)$x, (double)$y, (double)$width, (double)$height);
			]"
		end

	c_cairo_surface_create_observer (target: POINTER; mode: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_create_observer ((cairo_surface_t*)$target, (cairo_surface_observer_mode_t)$mode);
			]"
		end

	c_cairo_surface_observer_add_paint_callback (abstract_surface: POINTER; func: POINTER; data: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_observer_add_paint_callback ((cairo_surface_t*)$abstract_surface, (cairo_surface_observer_callback_t)$func, (void*)$data);
			]"
		end

	c_cairo_surface_observer_add_mask_callback (abstract_surface: POINTER; func: POINTER; data: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_observer_add_mask_callback ((cairo_surface_t*)$abstract_surface, (cairo_surface_observer_callback_t)$func, (void*)$data);
			]"
		end

	c_cairo_surface_observer_add_fill_callback (abstract_surface: POINTER; func: POINTER; data: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_observer_add_fill_callback ((cairo_surface_t*)$abstract_surface, (cairo_surface_observer_callback_t)$func, (void*)$data);
			]"
		end

	c_cairo_surface_observer_add_stroke_callback (abstract_surface: POINTER; func: POINTER; data: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_observer_add_stroke_callback ((cairo_surface_t*)$abstract_surface, (cairo_surface_observer_callback_t)$func, (void*)$data);
			]"
		end

	c_cairo_surface_observer_add_glyphs_callback (abstract_surface: POINTER; func: POINTER; data: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_observer_add_glyphs_callback ((cairo_surface_t*)$abstract_surface, (cairo_surface_observer_callback_t)$func, (void*)$data);
			]"
		end

	c_cairo_surface_observer_add_flush_callback (abstract_surface: POINTER; func: POINTER; data: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_observer_add_flush_callback ((cairo_surface_t*)$abstract_surface, (cairo_surface_observer_callback_t)$func, (void*)$data);
			]"
		end

	c_cairo_surface_observer_add_finish_callback (abstract_surface: POINTER; func: POINTER; data: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_observer_add_finish_callback ((cairo_surface_t*)$abstract_surface, (cairo_surface_observer_callback_t)$func, (void*)$data);
			]"
		end

	c_cairo_surface_observer_print (surface: POINTER; write_func: POINTER; closure: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_observer_print ((cairo_surface_t*)$surface, (cairo_write_func_t)$write_func, (void*)$closure);
			]"
		end

	c_cairo_surface_observer_elapsed (surface: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_observer_elapsed ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_device_observer_print (device: POINTER; write_func: POINTER; closure: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_observer_print ((cairo_device_t*)$device, (cairo_write_func_t)$write_func, (void*)$closure);
			]"
		end

	c_cairo_device_observer_elapsed (device: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_observer_elapsed ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_observer_paint_elapsed (device: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_observer_paint_elapsed ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_observer_mask_elapsed (device: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_observer_mask_elapsed ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_observer_fill_elapsed (device: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_observer_fill_elapsed ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_observer_stroke_elapsed (device: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_observer_stroke_elapsed ((cairo_device_t*)$device);
			]"
		end

	c_cairo_device_observer_glyphs_elapsed (device: POINTER): REAL_64
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_device_observer_glyphs_elapsed ((cairo_device_t*)$device);
			]"
		end

	c_cairo_surface_reference (surface: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_reference ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_finish (surface: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_finish ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_destroy (surface: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_destroy ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_get_device (surface: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_get_device ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_get_reference_count (surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_get_reference_count ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_status (surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_status ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_get_type (surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_get_type ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_get_content (surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_get_content ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_write_to_png (surface: POINTER; filename: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_write_to_png ((cairo_surface_t*)$surface, (char const*)$filename);
			]"
		end

	c_cairo_surface_write_to_png_stream (surface: POINTER; write_func: POINTER; closure: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_write_to_png_stream ((cairo_surface_t*)$surface, (cairo_write_func_t)$write_func, (void*)$closure);
			]"
		end

	c_cairo_surface_get_user_data (surface: POINTER; key: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_get_user_data ((cairo_surface_t*)$surface, (cairo_user_data_key_t const*)$key);
			]"
		end

	c_cairo_surface_set_user_data (surface: POINTER; key: POINTER; user_data: POINTER; destroy: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_set_user_data ((cairo_surface_t*)$surface, (cairo_user_data_key_t const*)$key, (void*)$user_data, (cairo_destroy_func_t)$destroy);
			]"
		end

	c_cairo_surface_get_mime_data (surface: POINTER; mime_type: POINTER; data: POINTER; length: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_get_mime_data ((cairo_surface_t*)$surface, (char const*)$mime_type, (unsigned char const**)$data, (unsigned long*)$length);
			]"
		end

	c_cairo_surface_set_mime_data (surface: POINTER; mime_type: POINTER; data: POINTER; length: INTEGER; destroy: POINTER; closure: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_set_mime_data ((cairo_surface_t*)$surface, (char const*)$mime_type, (unsigned char const*)$data, (unsigned long)$length, (cairo_destroy_func_t)$destroy, (void*)$closure);
			]"
		end

	c_cairo_surface_supports_mime_type (surface: POINTER; mime_type: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_supports_mime_type ((cairo_surface_t*)$surface, (char const*)$mime_type);
			]"
		end

	c_cairo_surface_get_font_options (surface: POINTER; options: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_get_font_options ((cairo_surface_t*)$surface, (cairo_font_options_t*)$options);
			]"
		end

	c_cairo_surface_flush (surface: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_flush ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_mark_dirty (surface: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_mark_dirty ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_mark_dirty_rectangle (surface: POINTER; x: INTEGER; y: INTEGER; width: INTEGER; height: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_mark_dirty_rectangle ((cairo_surface_t*)$surface, (int)$x, (int)$y, (int)$width, (int)$height);
			]"
		end

	c_cairo_surface_set_device_scale (surface: POINTER; x_scale: REAL_64; y_scale: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_set_device_scale ((cairo_surface_t*)$surface, (double)$x_scale, (double)$y_scale);
			]"
		end

	c_cairo_surface_get_device_scale (surface: POINTER; x_scale: POINTER; y_scale: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_get_device_scale ((cairo_surface_t*)$surface, (double*)$x_scale, (double*)$y_scale);
			]"
		end

	c_cairo_surface_set_device_offset (surface: POINTER; x_offset: REAL_64; y_offset: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_set_device_offset ((cairo_surface_t*)$surface, (double)$x_offset, (double)$y_offset);
			]"
		end

	c_cairo_surface_get_device_offset (surface: POINTER; x_offset: POINTER; y_offset: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_get_device_offset ((cairo_surface_t*)$surface, (double*)$x_offset, (double*)$y_offset);
			]"
		end

	c_cairo_surface_set_fallback_resolution (surface: POINTER; x_pixels_per_inch: REAL_64; y_pixels_per_inch: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_set_fallback_resolution ((cairo_surface_t*)$surface, (double)$x_pixels_per_inch, (double)$y_pixels_per_inch);
			]"
		end

	c_cairo_surface_get_fallback_resolution (surface: POINTER; x_pixels_per_inch: POINTER; y_pixels_per_inch: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_get_fallback_resolution ((cairo_surface_t*)$surface, (double*)$x_pixels_per_inch, (double*)$y_pixels_per_inch);
			]"
		end

	c_cairo_surface_copy_page (surface: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_copy_page ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_show_page (surface: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_surface_show_page ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_surface_has_show_text_glyphs (surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_surface_has_show_text_glyphs ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_image_surface_create (format: INTEGER; width: INTEGER; height: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_image_surface_create ((cairo_format_t)$format, (int)$width, (int)$height);
			]"
		end

	c_cairo_format_stride_for_width (format: INTEGER; width: INTEGER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_format_stride_for_width ((cairo_format_t)$format, (int)$width);
			]"
		end

	c_cairo_image_surface_create_for_data (data: POINTER; format: INTEGER; width: INTEGER; height: INTEGER; stride: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_image_surface_create_for_data ((unsigned char*)$data, (cairo_format_t)$format, (int)$width, (int)$height, (int)$stride);
			]"
		end

	c_cairo_image_surface_get_data (surface: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_image_surface_get_data ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_image_surface_get_format (surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_image_surface_get_format ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_image_surface_get_width (surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_image_surface_get_width ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_image_surface_get_height (surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_image_surface_get_height ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_image_surface_get_stride (surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_image_surface_get_stride ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_image_surface_create_from_png_stream (read_func: POINTER; closure: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_image_surface_create_from_png_stream ((cairo_read_func_t)$read_func, (void*)$closure);
			]"
		end

	c_cairo_recording_surface_create (content: INTEGER; extents: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_recording_surface_create ((cairo_content_t)$content, (cairo_rectangle_t const*)$extents);
			]"
		end

	c_cairo_recording_surface_ink_extents (surface: POINTER; x0: POINTER; y0: POINTER; width: POINTER; height: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_recording_surface_ink_extents ((cairo_surface_t*)$surface, (double*)$x0, (double*)$y0, (double*)$width, (double*)$height);
			]"
		end

	c_cairo_recording_surface_get_extents (surface: POINTER; extents: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_recording_surface_get_extents ((cairo_surface_t*)$surface, (cairo_rectangle_t*)$extents);
			]"
		end

	c_cairo_pattern_create_raster_source (user_data: POINTER; content: INTEGER; width: INTEGER; height: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_create_raster_source ((void*)$user_data, (cairo_content_t)$content, (int)$width, (int)$height);
			]"
		end

	c_cairo_raster_source_pattern_set_callback_data (pattern: POINTER; data: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_raster_source_pattern_set_callback_data ((cairo_pattern_t*)$pattern, (void*)$data);
			]"
		end

	c_cairo_raster_source_pattern_get_callback_data (pattern: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_raster_source_pattern_get_callback_data ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_raster_source_pattern_set_acquire (pattern: POINTER; acquire: POINTER; release: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_raster_source_pattern_set_acquire ((cairo_pattern_t*)$pattern, (cairo_raster_source_acquire_func_t)$acquire, (cairo_raster_source_release_func_t)$release);
			]"
		end

	c_cairo_raster_source_pattern_get_acquire (pattern: POINTER; acquire: POINTER; release: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_raster_source_pattern_get_acquire ((cairo_pattern_t*)$pattern, (cairo_raster_source_acquire_func_t*)$acquire, (cairo_raster_source_release_func_t*)$release);
			]"
		end

	c_cairo_raster_source_pattern_set_snapshot (pattern: POINTER; snapshot: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_raster_source_pattern_set_snapshot ((cairo_pattern_t*)$pattern, (cairo_raster_source_snapshot_func_t)$snapshot);
			]"
		end

	c_cairo_raster_source_pattern_get_snapshot (pattern: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_raster_source_pattern_get_snapshot ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_raster_source_pattern_set_copy (pattern: POINTER; a_copy: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_raster_source_pattern_set_copy ((cairo_pattern_t*)$pattern, (cairo_raster_source_copy_func_t)$a_copy);
			]"
		end

	c_cairo_raster_source_pattern_get_copy (pattern: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_raster_source_pattern_get_copy ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_raster_source_pattern_set_finish (pattern: POINTER; finish: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_raster_source_pattern_set_finish ((cairo_pattern_t*)$pattern, (cairo_raster_source_finish_func_t)$finish);
			]"
		end

	c_cairo_raster_source_pattern_get_finish (pattern: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_raster_source_pattern_get_finish ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_pattern_create_for_surface (surface: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_create_for_surface ((cairo_surface_t*)$surface);
			]"
		end

	c_cairo_pattern_create_mesh: POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_create_mesh ();
			]"
		end

	c_cairo_pattern_reference (pattern: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_reference ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_pattern_destroy (pattern: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_pattern_destroy ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_pattern_get_reference_count (pattern: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_reference_count ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_pattern_status (pattern: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_status ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_pattern_get_user_data (pattern: POINTER; key: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_user_data ((cairo_pattern_t*)$pattern, (cairo_user_data_key_t const*)$key);
			]"
		end

	c_cairo_pattern_set_user_data (pattern: POINTER; key: POINTER; user_data: POINTER; destroy: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_set_user_data ((cairo_pattern_t*)$pattern, (cairo_user_data_key_t const*)$key, (void*)$user_data, (cairo_destroy_func_t)$destroy);
			]"
		end

	c_cairo_pattern_get_type (pattern: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_type ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_pattern_add_color_stop_rgb (pattern: POINTER; offset: REAL_64; red: REAL_64; green: REAL_64; blue: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_pattern_add_color_stop_rgb ((cairo_pattern_t*)$pattern, (double)$offset, (double)$red, (double)$green, (double)$blue);
			]"
		end

	c_cairo_pattern_add_color_stop_rgba (pattern: POINTER; offset: REAL_64; red: REAL_64; green: REAL_64; blue: REAL_64; alpha: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_pattern_add_color_stop_rgba ((cairo_pattern_t*)$pattern, (double)$offset, (double)$red, (double)$green, (double)$blue, (double)$alpha);
			]"
		end

	c_cairo_mesh_pattern_begin_patch (pattern: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mesh_pattern_begin_patch ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_mesh_pattern_end_patch (pattern: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mesh_pattern_end_patch ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_mesh_pattern_curve_to (pattern: POINTER; x1: REAL_64; y1: REAL_64; x2: REAL_64; y2: REAL_64; x3: REAL_64; y3: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mesh_pattern_curve_to ((cairo_pattern_t*)$pattern, (double)$x1, (double)$y1, (double)$x2, (double)$y2, (double)$x3, (double)$y3);
			]"
		end

	c_cairo_mesh_pattern_line_to (pattern: POINTER; x: REAL_64; y: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mesh_pattern_line_to ((cairo_pattern_t*)$pattern, (double)$x, (double)$y);
			]"
		end

	c_cairo_mesh_pattern_move_to (pattern: POINTER; x: REAL_64; y: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mesh_pattern_move_to ((cairo_pattern_t*)$pattern, (double)$x, (double)$y);
			]"
		end

	c_cairo_mesh_pattern_set_control_point (pattern: POINTER; point_num: INTEGER; x: REAL_64; y: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mesh_pattern_set_control_point ((cairo_pattern_t*)$pattern, (unsigned int)$point_num, (double)$x, (double)$y);
			]"
		end

	c_cairo_mesh_pattern_set_corner_color_rgb (pattern: POINTER; corner_num: INTEGER; red: REAL_64; green: REAL_64; blue: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mesh_pattern_set_corner_color_rgb ((cairo_pattern_t*)$pattern, (unsigned int)$corner_num, (double)$red, (double)$green, (double)$blue);
			]"
		end

	c_cairo_mesh_pattern_set_corner_color_rgba (pattern: POINTER; corner_num: INTEGER; red: REAL_64; green: REAL_64; blue: REAL_64; alpha: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_mesh_pattern_set_corner_color_rgba ((cairo_pattern_t*)$pattern, (unsigned int)$corner_num, (double)$red, (double)$green, (double)$blue, (double)$alpha);
			]"
		end

	c_cairo_pattern_set_matrix (pattern: POINTER; matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_pattern_set_matrix ((cairo_pattern_t*)$pattern, (cairo_matrix_t const*)$matrix);
			]"
		end

	c_cairo_pattern_get_matrix (pattern: POINTER; matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_pattern_get_matrix ((cairo_pattern_t*)$pattern, (cairo_matrix_t*)$matrix);
			]"
		end

	c_cairo_pattern_set_extend (pattern: POINTER; extend: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_pattern_set_extend ((cairo_pattern_t*)$pattern, (cairo_extend_t)$extend);
			]"
		end

	c_cairo_pattern_get_extend (pattern: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_extend ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_pattern_set_filter (pattern: POINTER; filter: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_pattern_set_filter ((cairo_pattern_t*)$pattern, (cairo_filter_t)$filter);
			]"
		end

	c_cairo_pattern_get_filter (pattern: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_filter ((cairo_pattern_t*)$pattern);
			]"
		end

	c_cairo_pattern_get_rgba (pattern: POINTER; red: POINTER; green: POINTER; blue: POINTER; alpha: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_rgba ((cairo_pattern_t*)$pattern, (double*)$red, (double*)$green, (double*)$blue, (double*)$alpha);
			]"
		end

	c_cairo_pattern_get_surface (pattern: POINTER; surface: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_surface ((cairo_pattern_t*)$pattern, (cairo_surface_t**)$surface);
			]"
		end

	c_cairo_pattern_get_color_stop_rgba (pattern: POINTER; index: INTEGER; offset: POINTER; red: POINTER; green: POINTER; blue: POINTER; alpha: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_color_stop_rgba ((cairo_pattern_t*)$pattern, (int)$index, (double*)$offset, (double*)$red, (double*)$green, (double*)$blue, (double*)$alpha);
			]"
		end

	c_cairo_pattern_get_color_stop_count (pattern: POINTER; count: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_color_stop_count ((cairo_pattern_t*)$pattern, (int*)$count);
			]"
		end

	c_cairo_pattern_get_linear_points (pattern: POINTER; x0: POINTER; y0: POINTER; x1: POINTER; y1: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_linear_points ((cairo_pattern_t*)$pattern, (double*)$x0, (double*)$y0, (double*)$x1, (double*)$y1);
			]"
		end

	c_cairo_pattern_get_radial_circles (pattern: POINTER; x0: POINTER; y0: POINTER; r0: POINTER; x1: POINTER; y1: POINTER; r1: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_pattern_get_radial_circles ((cairo_pattern_t*)$pattern, (double*)$x0, (double*)$y0, (double*)$r0, (double*)$x1, (double*)$y1, (double*)$r1);
			]"
		end

	c_cairo_mesh_pattern_get_patch_count (pattern: POINTER; count: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_mesh_pattern_get_patch_count ((cairo_pattern_t*)$pattern, (unsigned int*)$count);
			]"
		end

	c_cairo_mesh_pattern_get_path (pattern: POINTER; patch_num: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_mesh_pattern_get_path ((cairo_pattern_t*)$pattern, (unsigned int)$patch_num);
			]"
		end

	c_cairo_mesh_pattern_get_corner_color_rgba (pattern: POINTER; patch_num: INTEGER; corner_num: INTEGER; red: POINTER; green: POINTER; blue: POINTER; alpha: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_mesh_pattern_get_corner_color_rgba ((cairo_pattern_t*)$pattern, (unsigned int)$patch_num, (unsigned int)$corner_num, (double*)$red, (double*)$green, (double*)$blue, (double*)$alpha);
			]"
		end

	c_cairo_mesh_pattern_get_control_point (pattern: POINTER; patch_num: INTEGER; point_num: INTEGER; x: POINTER; y: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_mesh_pattern_get_control_point ((cairo_pattern_t*)$pattern, (unsigned int)$patch_num, (unsigned int)$point_num, (double*)$x, (double*)$y);
			]"
		end

	c_cairo_matrix_init (matrix: POINTER; xx: REAL_64; yx: REAL_64; xy: REAL_64; yy: REAL_64; x0: REAL_64; y0: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_init ((cairo_matrix_t*)$matrix, (double)$xx, (double)$yx, (double)$xy, (double)$yy, (double)$x0, (double)$y0);
			]"
		end

	c_cairo_matrix_init_identity (matrix: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_init_identity ((cairo_matrix_t*)$matrix);
			]"
		end

	c_cairo_matrix_init_translate (matrix: POINTER; tx: REAL_64; ty: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_init_translate ((cairo_matrix_t*)$matrix, (double)$tx, (double)$ty);
			]"
		end

	c_cairo_matrix_init_scale (matrix: POINTER; sx: REAL_64; sy: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_init_scale ((cairo_matrix_t*)$matrix, (double)$sx, (double)$sy);
			]"
		end

	c_cairo_matrix_init_rotate (matrix: POINTER; radians: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_init_rotate ((cairo_matrix_t*)$matrix, (double)$radians);
			]"
		end

	c_cairo_matrix_translate (matrix: POINTER; tx: REAL_64; ty: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_translate ((cairo_matrix_t*)$matrix, (double)$tx, (double)$ty);
			]"
		end

	c_cairo_matrix_scale (matrix: POINTER; sx: REAL_64; sy: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_scale ((cairo_matrix_t*)$matrix, (double)$sx, (double)$sy);
			]"
		end

	c_cairo_matrix_rotate (matrix: POINTER; radians: REAL_64)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_rotate ((cairo_matrix_t*)$matrix, (double)$radians);
			]"
		end

	c_cairo_matrix_invert (matrix: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_matrix_invert ((cairo_matrix_t*)$matrix);
			]"
		end

	c_cairo_matrix_multiply (a_result: POINTER; a: POINTER; b: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_multiply ((cairo_matrix_t*)$a_result, (cairo_matrix_t const*)$a, (cairo_matrix_t const*)$b);
			]"
		end

	c_cairo_matrix_transform_distance (matrix: POINTER; dx: POINTER; dy: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_transform_distance ((cairo_matrix_t const*)$matrix, (double*)$dx, (double*)$dy);
			]"
		end

	c_cairo_matrix_transform_point (matrix: POINTER; x: POINTER; y: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_matrix_transform_point ((cairo_matrix_t const*)$matrix, (double*)$x, (double*)$y);
			]"
		end

	c_cairo_region_create: POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_create ();
			]"
		end

	c_cairo_region_create_rectangle (rectangle: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_create_rectangle ((cairo_rectangle_int_t const*)$rectangle);
			]"
		end

	c_cairo_region_create_rectangles (rects: POINTER; count: INTEGER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_create_rectangles ((cairo_rectangle_int_t const*)$rects, (int)$count);
			]"
		end

	c_cairo_region_copy (original: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_copy ((cairo_region_t const*)$original);
			]"
		end

	c_cairo_region_reference (region: POINTER): POINTER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_reference ((cairo_region_t*)$region);
			]"
		end

	c_cairo_region_destroy (region: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_region_destroy ((cairo_region_t*)$region);
			]"
		end

	c_cairo_region_equal (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_equal ((cairo_region_t const*)$a, (cairo_region_t const*)$b);
			]"
		end

	c_cairo_region_status (region: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_status ((cairo_region_t const*)$region);
			]"
		end

	c_cairo_region_get_extents (region: POINTER; extents: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_region_get_extents ((cairo_region_t const*)$region, (cairo_rectangle_int_t*)$extents);
			]"
		end

	c_cairo_region_num_rectangles (region: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_num_rectangles ((cairo_region_t const*)$region);
			]"
		end

	c_cairo_region_get_rectangle (region: POINTER; nth: INTEGER; rectangle: POINTER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_region_get_rectangle ((cairo_region_t const*)$region, (int)$nth, (cairo_rectangle_int_t*)$rectangle);
			]"
		end

	c_cairo_region_is_empty (region: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_is_empty ((cairo_region_t const*)$region);
			]"
		end

	c_cairo_region_contains_rectangle (region: POINTER; rectangle: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_contains_rectangle ((cairo_region_t const*)$region, (cairo_rectangle_int_t const*)$rectangle);
			]"
		end

	c_cairo_region_contains_point (region: POINTER; x: INTEGER; y: INTEGER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_contains_point ((cairo_region_t const*)$region, (int)$x, (int)$y);
			]"
		end

	c_cairo_region_translate (region: POINTER; dx: INTEGER; dy: INTEGER)
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				cairo_region_translate ((cairo_region_t*)$region, (int)$dx, (int)$dy);
			]"
		end

	c_cairo_region_subtract (dst: POINTER; other: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_subtract ((cairo_region_t*)$dst, (cairo_region_t const*)$other);
			]"
		end

	c_cairo_region_subtract_rectangle (dst: POINTER; rectangle: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_subtract_rectangle ((cairo_region_t*)$dst, (cairo_rectangle_int_t const*)$rectangle);
			]"
		end

	c_cairo_region_intersect (dst: POINTER; other: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_intersect ((cairo_region_t*)$dst, (cairo_region_t const*)$other);
			]"
		end

	c_cairo_region_intersect_rectangle (dst: POINTER; rectangle: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_intersect_rectangle ((cairo_region_t*)$dst, (cairo_rectangle_int_t const*)$rectangle);
			]"
		end

	c_cairo_region_union (dst: POINTER; other: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_union ((cairo_region_t*)$dst, (cairo_region_t const*)$other);
			]"
		end

	c_cairo_region_union_rectangle (dst: POINTER; rectangle: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_union_rectangle ((cairo_region_t*)$dst, (cairo_rectangle_int_t const*)$rectangle);
			]"
		end

	c_cairo_region_xor (dst: POINTER; other: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_xor ((cairo_region_t*)$dst, (cairo_region_t const*)$other);
			]"
		end

	c_cairo_region_xor_rectangle (dst: POINTER; rectangle: POINTER): INTEGER
		external
			"C inline use <eif_cairo.h>"
		alias
			"[
				return cairo_region_xor_rectangle ((cairo_region_t*)$dst, (cairo_rectangle_int_t const*)$rectangle);
			]"
		end

feature -- Externals Address

end
