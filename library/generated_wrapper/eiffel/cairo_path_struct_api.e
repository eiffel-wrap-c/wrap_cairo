note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CAIRO_PATH_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	status: INTEGER
			-- Access member `status`
		require
			exists: exists
		do
			Result := c_status (item)
		ensure
			result_correct: Result = c_status (item)
		end

	set_status (a_value: INTEGER) 
			-- Change the value of member `status` to `a_value`.
		require
			exists: exists
		do
			set_c_status (item, a_value)
		ensure
			status_set: a_value = status
		end

	data: detachable CAIRO_PATH_DATA_T_UNION_API 
			-- Access member `data`
		require
			exists: exists
		do
			if attached c_data (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			else
				create Result.make
			end
		ensure
			result_void: Result = Void implies c_data (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_data (item) 
		end

	set_data (a_value: CAIRO_PATH_DATA_T_UNION_API) 
			-- Set member `data`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_data (item, a_value.item)
		ensure
			data_set: attached data as l_value implies l_value.item = a_value.item		end

	num_data: INTEGER
			-- Access member `num_data`
		require
			exists: exists
		do
			Result := c_num_data (item)
		ensure
			result_correct: Result = c_num_data (item)
		end

	set_num_data (a_value: INTEGER) 
			-- Change the value of member `num_data` to `a_value`.
		require
			exists: exists
		do
			set_c_num_data (item, a_value)
		ensure
			num_data_set: a_value = num_data
		end

feature {NONE} -- Implementation wrapper for struct struct cairo_path

	sizeof_external: INTEGER 
		external
			"C inline use <cairo.h>"
		alias
			"sizeof(struct cairo_path)"
		end

	c_status (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->status
			]"
		end

	set_c_status (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->status =  (cairo_status_t)$a_value
			]"
		ensure
			status_set: a_value = c_status (an_item)
		end

	c_data (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->data
			]"
		end

	set_c_data (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->data =  (cairo_path_data_t*)$a_value
			]"
		ensure
			data_set: a_value = c_data (an_item)
		end

	c_num_data (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->num_data
			]"
		end

	set_c_num_data (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <cairo.h>"
		alias
			"[
				((struct cairo_path*)$an_item)->num_data =  (int)$a_value
			]"
		ensure
			num_data_set: a_value = c_num_data (an_item)
		end

end
